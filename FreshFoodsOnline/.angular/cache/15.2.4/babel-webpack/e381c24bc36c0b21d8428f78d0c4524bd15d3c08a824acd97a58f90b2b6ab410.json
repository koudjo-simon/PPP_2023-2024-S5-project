{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./cart.service\";\nexport class CommandService {\n  constructor(http, cartService) {\n    this.http = http;\n    this.cartService = cartService;\n    this.commandList = [];\n    this.commandLineList = [];\n    this.commandPassed = false;\n    this.apiUrl = \"http://localhost:8080/api/\";\n    cartService.getCartCmdLinesFoods().subscribe({\n      next: value => {\n        this.commandLineList = value;\n        console.log(\"Getting command lines of the cart\");\n      }\n    });\n  }\n  addCommand(cmd) {\n    this.commandList.push(cmd);\n    return of(true);\n    /*if (cmd == undefined) return throwError(() => new Error(\"Command add failed\"));\r\n    /!*const cust: Customer = {\r\n      customerId: \"\",\r\n      firstname: cmd.customer.firstname,\r\n      age: cmd.customer.age,\r\n          }*!/\r\n    this.http.post<Customer>(this.apiUrl + \"customers/add\", cmd.customer).subscribe({\r\n      next: customer => {\r\n        console.log(\"My customerId: \" + customer.customerId)\r\n        this.http.get<Command>(this.apiUrl + \"commands/addFor/\" + customer.customerId)\r\n          .subscribe({\r\n          next: command => {\r\n            console.log(\"Affichage de la list des command Lines: \", this.commandLineList)\r\n            this.commandLineList.forEach(commandLine => {\r\n              this.http.get<CommandLine>(this.apiUrl + \"commandLine/add?foodId=\"\r\n                + \"1d799841-c54e-4c72-8e2a-842e5214fe1c\" + \"&&commandId=\" + command.commandId +\r\n                \"&&quantity=\" + commandLine.quantity).subscribe({\r\n                next: cmdLine => {\r\n                  console.log(\"The command passed successfully\");\r\n                },\r\n                error: err => throwError(() => new Error(err))\r\n              })\r\n            })\r\n          }\r\n        });\r\n      },\r\n      error: err => throwError(() => new Error(err))\r\n    });\r\n    return of(cmd)*/\n  }\n\n  setCommandLines(cmdLines) {\n    if (cmdLines.length > 0) {\n      cmdLines.forEach(cmdLine => {\n        this.commandLineList.push(cmdLine);\n      });\n    }\n  }\n  getCommands() {\n    if (this.commandList.length == 0) return throwError(() => new Error(\"Command List is empty\"));\n    return of(this.commandList);\n  }\n  getCommandLines() {\n    if (this.commandLineList.length == 0) return throwError(() => new Error(\"Command Line list is empty.\"));\n    return of(this.commandLineList);\n  }\n  setCommandPassed() {\n    this.commandPassed = true;\n  }\n  isCommandPassed() {\n    return this.commandPassed;\n  }\n}\nCommandService.ɵfac = function CommandService_Factory(t) {\n  return new (t || CommandService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CartService));\n};\nCommandService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CommandService,\n  factory: CommandService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAoBA,EAAE,EAAEC,UAAU,QAAO,MAAM;;;;AAQ/C,OAAM,MAAOC,cAAc;EAQzBC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IANjD,gBAAW,GAAc,EAAE;IAC3B,oBAAe,GAAkB,EAAE;IACpC,kBAAa,GAAY,KAAK;IAErC,WAAM,GAAG,4BAA4B;IAGnCA,WAAW,CAACC,oBAAoB,EAAE,CAACC,SAAS,CAAC;MAC3CC,IAAI,EAAEC,KAAK,IAAG;QACZ,IAAI,CAACC,eAAe,GAAGD,KAAK;QAC5BE,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAClD;KACD,CAAC;EACJ;EAEOC,UAAU,CAACC,GAAY;IAC5B,IAAI,CAACC,WAAW,CAACC,IAAI,CAACF,GAAG,CAAC;IAC1B,OAAOd,EAAE,CAAC,IAAI,CAAC;IACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BF;;EAEOiB,eAAe,CAACC,QAAuB;IAC5C,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;MACvBD,QAAQ,CAACE,OAAO,CAACC,OAAO,IAAG;QACzB,IAAI,CAACX,eAAe,CAACM,IAAI,CAACK,OAAO,CAAC;MACpC,CAAC,CAAC;;EAEN;EAEOC,WAAW;IAChB,IAAI,IAAI,CAACP,WAAW,CAACI,MAAM,IAAI,CAAC,EAC9B,OAAOlB,UAAU,CAAC,MAAM,IAAIsB,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC7D,OAAOvB,EAAE,CAAC,IAAI,CAACe,WAAW,CAAC;EAC7B;EAEOS,eAAe;IACpB,IAAI,IAAI,CAACd,eAAe,CAACS,MAAM,IAAI,CAAC,EAClC,OAAOlB,UAAU,CAAC,MAAM,IAAIsB,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACnE,OAAOvB,EAAE,CAAC,IAAI,CAACU,eAAe,CAAC;EACjC;EAEQe,gBAAgB;IACtB,IAAI,CAACC,aAAa,GAAG,IAAI;EAC3B;EAEOC,eAAe;IACpB,OAAO,IAAI,CAACD,aAAa;EAC3B;;AA9EWxB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA0B,SAAd1B,cAAc;EAAA2B,YAFb;AAAM","names":["of","throwError","CommandService","constructor","http","cartService","getCartCmdLinesFoods","subscribe","next","value","commandLineList","console","log","addCommand","cmd","commandList","push","setCommandLines","cmdLines","length","forEach","cmdLine","getCommands","Error","getCommandLines","setCommandPassed","commandPassed","isCommandPassed","factory","providedIn"],"sourceRoot":"","sources":["D:\\PROJETS\\PPP - 2023_2024\\FreshFoodsOnline\\src\\app\\services\\command.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {Command} from '../shared/model/command';\r\nimport {CommandLine} from '../shared/model/command-line';\r\nimport {Observable, of, throwError} from 'rxjs';\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Customer} from \"../shared/model/customer\";\r\nimport {CartService} from \"./cart.service\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommandService {\r\n\r\n  private commandList: Command[] = [];\r\n  private commandLineList: CommandLine[] = [];\r\n  public commandPassed: boolean = false;\r\n\r\n  apiUrl = \"http://localhost:8080/api/\"\r\n\r\n  constructor(private http: HttpClient, private cartService: CartService) {\r\n    cartService.getCartCmdLinesFoods().subscribe({\r\n      next: value => {\r\n        this.commandLineList = value;\r\n        console.log(\"Getting command lines of the cart\");\r\n      }\r\n    })\r\n  }\r\n\r\n  public addCommand(cmd: Command): Observable<any> {\r\n    this.commandList.push(cmd);\r\n    return of(true)\r\n    /*if (cmd == undefined) return throwError(() => new Error(\"Command add failed\"));\r\n    /!*const cust: Customer = {\r\n      customerId: \"\",\r\n      firstname: cmd.customer.firstname,\r\n      age: cmd.customer.age,\r\n\r\n    }*!/\r\n    this.http.post<Customer>(this.apiUrl + \"customers/add\", cmd.customer).subscribe({\r\n      next: customer => {\r\n        console.log(\"My customerId: \" + customer.customerId)\r\n        this.http.get<Command>(this.apiUrl + \"commands/addFor/\" + customer.customerId)\r\n          .subscribe({\r\n          next: command => {\r\n            console.log(\"Affichage de la list des command Lines: \", this.commandLineList)\r\n            this.commandLineList.forEach(commandLine => {\r\n              this.http.get<CommandLine>(this.apiUrl + \"commandLine/add?foodId=\"\r\n                + \"1d799841-c54e-4c72-8e2a-842e5214fe1c\" + \"&&commandId=\" + command.commandId +\r\n                \"&&quantity=\" + commandLine.quantity).subscribe({\r\n                next: cmdLine => {\r\n                  console.log(\"The command passed successfully\");\r\n                },\r\n                error: err => throwError(() => new Error(err))\r\n              })\r\n            })\r\n          }\r\n        });\r\n      },\r\n      error: err => throwError(() => new Error(err))\r\n    });\r\n    return of(cmd)*/\r\n  }\r\n\r\n  public setCommandLines(cmdLines: CommandLine[]) {\r\n    if (cmdLines.length > 0) {\r\n      cmdLines.forEach(cmdLine => {\r\n        this.commandLineList.push(cmdLine);\r\n      })\r\n    }\r\n  }\r\n\r\n  public getCommands(): Observable<Command[]> {\r\n    if (this.commandList.length == 0)\r\n      return throwError(() => new Error(\"Command List is empty\"));\r\n    return of(this.commandList);\r\n  }\r\n\r\n  public getCommandLines(): Observable<CommandLine[]> {\r\n    if (this.commandLineList.length == 0)\r\n      return throwError(() => new Error(\"Command Line list is empty.\"));\r\n    return of(this.commandLineList);\r\n  }\r\n\r\n  private setCommandPassed() {\r\n    this.commandPassed = true;\r\n  }\r\n\r\n  public isCommandPassed(): boolean {\r\n    return this.commandPassed\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}