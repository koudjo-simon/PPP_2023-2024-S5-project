{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CommandService {\n  constructor() {\n    this.commandList = [];\n    this.commandLineList = [];\n    this.commandPassed = false;\n  }\n  addCommand(cmd) {\n    if (cmd == undefined) return throwError(() => new Error(\"Command add failed\"));\n    this.commandList.push(cmd);\n    this.setCommandPassed();\n    return of(cmd);\n  }\n  getCommands() {\n    if (this.commandList.length == 0) return throwError(() => new Error(\"Command List is empty\"));\n    return of(this.commandList);\n  }\n  getCommandLines() {\n    if (this.commandLineList.length == 0) return throwError(() => new Error(\"Command Line list is empty.\"));\n    return of(this.commandLineList);\n  }\n  setCommandPassed() {\n    this.commandPassed = true;\n  }\n  isCommandPassed() {\n    return this.commandPassed;\n  }\n}\nCommandService.ɵfac = function CommandService_Factory(t) {\n  return new (t || CommandService)();\n};\nCommandService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CommandService,\n  factory: CommandService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,EAAE,EAAEC,UAAU,QAAQ,MAAM;;AAKjD,OAAM,MAAOC,cAAc;EAMzBC;IAJQ,gBAAW,GAAc,EAAE;IAC3B,oBAAe,GAAkB,EAAE;IACpC,kBAAa,GAAY,KAAK;EAErB;EAETC,UAAU,CAACC,GAAa;IAC7B,IAAIA,GAAG,IAAIC,SAAS,EAAE,OAAOL,UAAU,CAAC,MAAM,IAAIM,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAC9E,IAAI,CAACC,WAAW,CAACC,IAAI,CAACJ,GAAG,CAAC;IAC1B,IAAI,CAACK,gBAAgB,EAAE;IACvB,OAAOV,EAAE,CAACK,GAAG,CAAC;EAChB;EAIOM,WAAW;IAChB,IAAI,IAAI,CAACH,WAAW,CAACI,MAAM,IAAI,CAAC,EAAE,OAAOX,UAAU,CAAC,MAAM,IAAIM,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC7F,OAAOP,EAAE,CAAC,IAAI,CAACQ,WAAW,CAAC;EAC7B;EAEOK,eAAe;IACpB,IAAI,IAAI,CAACC,eAAe,CAACF,MAAM,IAAI,CAAC,EAAE,OAAOX,UAAU,CAAC,MAAM,IAAIM,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACvG,OAAOP,EAAE,CAAC,IAAI,CAACc,eAAe,CAAC;EACjC;EAEQJ,gBAAgB;IACtB,IAAI,CAACK,aAAa,GAAG,IAAI;EAC3B;EAEOC,eAAe;IACpB,OAAO,IAAI,CAACD,aAAa;EAC3B;;AAjCWb,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAe,SAAdf,cAAc;EAAAgB,YAFb;AAAM","names":["of","throwError","CommandService","constructor","addCommand","cmd","undefined","Error","commandList","push","setCommandPassed","getCommands","length","getCommandLines","commandLineList","commandPassed","isCommandPassed","factory","providedIn"],"sourceRoot":"","sources":["D:\\ESIG GLOBAL SUCCESS - PARCOURS\\ESIG LICENCE 2 - Génie Logiciel\\ESIG Licence 2 - SEMESTRE 4\\Licence 2 - Complement Web\\TRAVAIL DE M. AGBO - COMPLEMENT DEVELOPPEMENT\\FreshFoodsOnline\\src\\app\\services\\command.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Command } from '../shared/model/command';\nimport { CommandLine } from '../shared/model/command-line';\nimport { Observable, of, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommandService {\n\n  private commandList: Command[] = [];\n  private commandLineList: CommandLine[] = [];\n  public commandPassed: boolean = false;\n\n  constructor() { }\n\n  public addCommand(cmd : Command): Observable<Command>{\n    if (cmd == undefined) return throwError(() => new Error(\"Command add failed\"));\n    this.commandList.push(cmd);\n    this.setCommandPassed();\n    return of(cmd);\n  }\n\n  \n\n  public getCommands(): Observable<Command[]>{\n    if (this.commandList.length == 0) return throwError(() => new Error(\"Command List is empty\"));\n    return of(this.commandList);\n  }\n\n  public getCommandLines(): Observable<CommandLine[]>{\n    if (this.commandLineList.length == 0) return throwError(() => new Error(\"Command Line list is empty.\"));\n    return of(this.commandLineList);\n  }\n\n  private setCommandPassed(){\n    this.commandPassed = true;\n  }\n\n  public isCommandPassed(): boolean{\n    return this.commandPassed\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}