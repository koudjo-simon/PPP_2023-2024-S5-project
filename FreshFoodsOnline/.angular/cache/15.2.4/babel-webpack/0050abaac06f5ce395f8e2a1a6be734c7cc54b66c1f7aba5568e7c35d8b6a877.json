{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CommandService {\n  constructor(http) {\n    this.http = http;\n    this.commandList = [];\n    this.commandLineList = [];\n    this.commandPassed = false;\n    this.apiUrl = \"http://localhost:8080/api/\";\n  }\n  addCommand(cmd) {\n    if (cmd == undefined) return throwError(() => new Error(\"Command add failed\"));\n    /*const cust: Customer = {\r\n      customerId: \"\",\r\n      firstname: cmd.customer.firstname,\r\n      age: cmd.customer.age,\r\n          }*/\n    this.http.post(this.apiUrl + \"customers/add\", cmd.customer).subscribe({\n      next: customer => {\n        console.log(\"My customerId: \" + customer.customerId);\n        this.http.post(this.apiUrl + \"commands/addFor/\" + customer.customerId, cmd).subscribe({\n          next: command => {\n            if (command) {\n              this.commandLineList.forEach(commandLine => {\n                this.http.post(this.apiUrl + \"/commandLine/add\", {\n                  foodId: commandLine.food.foodId,\n                  commandId: command.commandId,\n                  quantity: commandLine.quantity\n                });\n              });\n            }\n          }\n        });\n      },\n      error: err => throwError(() => new Error(err))\n    });\n    return of(cmd);\n  }\n  setCommandLines(cmdLines) {\n    if (cmdLines.length > 0) {\n      cmdLines.forEach(cmdLine => {\n        this.commandLineList.push(cmdLine);\n      });\n    }\n  }\n  getCommands() {\n    if (this.commandList.length == 0) return throwError(() => new Error(\"Command List is empty\"));\n    return of(this.commandList);\n  }\n  getCommandLines() {\n    if (this.commandLineList.length == 0) return throwError(() => new Error(\"Command Line list is empty.\"));\n    return of(this.commandLineList);\n  }\n  setCommandPassed() {\n    this.commandPassed = true;\n  }\n  isCommandPassed() {\n    return this.commandPassed;\n  }\n}\nCommandService.ɵfac = function CommandService_Factory(t) {\n  return new (t || CommandService)(i0.ɵɵinject(i1.HttpClient));\n};\nCommandService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CommandService,\n  factory: CommandService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAoBA,EAAE,EAAEC,UAAU,QAAO,MAAM;;;AAO/C,OAAM,MAAOC,cAAc;EAQzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANhB,gBAAW,GAAc,EAAE;IAC3B,oBAAe,GAAkB,EAAE;IACpC,kBAAa,GAAY,KAAK;IAErC,WAAM,GAAG,4BAA4B;EAGrC;EAEOC,UAAU,CAACC,GAAY;IAC5B,IAAIA,GAAG,IAAIC,SAAS,EAAE,OAAON,UAAU,CAAC,MAAM,IAAIO,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAC9E;;;;;IAMA,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAW,IAAI,CAACC,MAAM,GAAG,eAAe,EAAEJ,GAAG,CAACK,QAAQ,CAAC,CAACC,SAAS,CAAC;MAC9EC,IAAI,EAAEF,QAAQ,IAAG;QACfG,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAEJ,QAAQ,CAACK,UAAU,CAAC;QACnD,IAAI,CAACZ,IAAI,CAACK,IAAI,CAAU,IAAI,CAACC,MAAM,GAAG,kBAAkB,GAAGC,QAAQ,CAACK,UAAU,EAAEV,GAAG,CAAC,CAACM,SAAS,CAAC;UAC7FC,IAAI,EAAEI,OAAO,IAAG;YACd,IAAIA,OAAO,EAAE;cACX,IAAI,CAACC,eAAe,CAACC,OAAO,CAACC,WAAW,IAAG;gBACzC,IAAI,CAAChB,IAAI,CAACK,IAAI,CAAc,IAAI,CAACC,MAAM,GAAG,kBAAkB,EAC1D;kBACEW,MAAM,EAAED,WAAW,CAACE,IAAI,CAACD,MAAM;kBAC/BE,SAAS,EAAEN,OAAO,CAACM,SAAS;kBAC5BC,QAAQ,EAAEJ,WAAW,CAACI;iBACvB,CAAC;cACN,CAAC,CAAC;;UAEN;SACD,CAAC;MACJ,CAAC;MACDC,KAAK,EAAEC,GAAG,IAAIzB,UAAU,CAAC,MAAM,IAAIO,KAAK,CAACkB,GAAG,CAAC;KAC9C,CAAC;IACF,OAAO1B,EAAE,CAACM,GAAG,CAAC;EAChB;EAEOqB,eAAe,CAACC,QAAuB;IAC5C,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;MACvBD,QAAQ,CAACT,OAAO,CAACW,OAAO,IAAG;QACzB,IAAI,CAACZ,eAAe,CAACa,IAAI,CAACD,OAAO,CAAC;MACpC,CAAC,CAAC;;EAEN;EAEOE,WAAW;IAChB,IAAI,IAAI,CAACC,WAAW,CAACJ,MAAM,IAAI,CAAC,EAAE,OAAO5B,UAAU,CAAC,MAAM,IAAIO,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC7F,OAAOR,EAAE,CAAC,IAAI,CAACiC,WAAW,CAAC;EAC7B;EAEOC,eAAe;IACpB,IAAI,IAAI,CAAChB,eAAe,CAACW,MAAM,IAAI,CAAC,EAAE,OAAO5B,UAAU,CAAC,MAAM,IAAIO,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACvG,OAAOR,EAAE,CAAC,IAAI,CAACkB,eAAe,CAAC;EACjC;EAEQiB,gBAAgB;IACtB,IAAI,CAACC,aAAa,GAAG,IAAI;EAC3B;EAEOC,eAAe;IACpB,OAAO,IAAI,CAACD,aAAa;EAC3B;;AAlEWlC,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAoC,SAAdpC,cAAc;EAAAqC,YAFb;AAAM","names":["of","throwError","CommandService","constructor","http","addCommand","cmd","undefined","Error","post","apiUrl","customer","subscribe","next","console","log","customerId","command","commandLineList","forEach","commandLine","foodId","food","commandId","quantity","error","err","setCommandLines","cmdLines","length","cmdLine","push","getCommands","commandList","getCommandLines","setCommandPassed","commandPassed","isCommandPassed","factory","providedIn"],"sourceRoot":"","sources":["D:\\ESIG GLOBAL SUCCESS - PARCOURS\\ESIG LICENCE 2 - Génie Logiciel\\ESIG Licence 2 - SEMESTRE 4\\Licence 2 - Complement Web\\TRAVAIL DE M. AGBO - COMPLEMENT DEVELOPPEMENT\\MyWork\\FreshFoodsOnline\\src\\app\\services\\command.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Command} from '../shared/model/command';\nimport {CommandLine} from '../shared/model/command-line';\nimport {Observable, of, throwError} from 'rxjs';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Customer} from \"../shared/model/customer\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommandService {\n\n  private commandList: Command[] = [];\n  private commandLineList: CommandLine[] = [];\n  public commandPassed: boolean = false;\n\n  apiUrl = \"http://localhost:8080/api/\"\n\n  constructor(private http: HttpClient) {\n  }\n\n  public addCommand(cmd: Command): Observable<Command> {\n    if (cmd == undefined) return throwError(() => new Error(\"Command add failed\"));\n    /*const cust: Customer = {\n      customerId: \"\",\n      firstname: cmd.customer.firstname,\n      age: cmd.customer.age,\n\n    }*/\n    this.http.post<Customer>(this.apiUrl + \"customers/add\", cmd.customer).subscribe({\n      next: customer => {\n        console.log(\"My customerId: \"+ customer.customerId)\n        this.http.post<Command>(this.apiUrl + \"commands/addFor/\" + customer.customerId, cmd).subscribe({\n          next: command => {\n            if (command) {\n              this.commandLineList.forEach(commandLine => {\n                this.http.post<CommandLine>(this.apiUrl + \"/commandLine/add\",\n                  {\n                    foodId: commandLine.food.foodId,\n                    commandId: command.commandId,\n                    quantity: commandLine.quantity\n                  })\n              })\n            }\n          }\n        });\n      },\n      error: err => throwError(() => new Error(err))\n    });\n    return of(cmd)\n  }\n\n  public setCommandLines(cmdLines: CommandLine[]) {\n    if (cmdLines.length > 0) {\n      cmdLines.forEach(cmdLine => {\n        this.commandLineList.push(cmdLine);\n      })\n    }\n  }\n\n  public getCommands(): Observable<Command[]> {\n    if (this.commandList.length == 0) return throwError(() => new Error(\"Command List is empty\"));\n    return of(this.commandList);\n  }\n\n  public getCommandLines(): Observable<CommandLine[]> {\n    if (this.commandLineList.length == 0) return throwError(() => new Error(\"Command Line list is empty.\"));\n    return of(this.commandLineList);\n  }\n\n  private setCommandPassed() {\n    this.commandPassed = true;\n  }\n\n  public isCommandPassed(): boolean {\n    return this.commandPassed\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}