{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CommandService {\n  constructor(http) {\n    this.http = http;\n    this.commandList = [];\n    this.commandLineList = [];\n    this.commandPassed = false;\n    this.apiUrl = \"http://localhost:8080/api/\";\n  }\n  addCommand(cmd) {\n    if (cmd == undefined) return throwError(() => new Error(\"Command add failed\"));\n    this.http.post(this.apiUrl + \"customers/add\", cmd.customer).subscribe({\n      next: customer => {\n        this.http.post(this.apiUrl + \"/commands/addFor/\" + customer.customerId, cmd).subscribe({\n          next: value1 => {}\n        });\n      },\n      error: err => throwError(() => new Error(err))\n    });\n    this.commandList.push(cmd);\n    this.setCommandPassed();\n    return of(cmd);\n  }\n  registerCustomer(customer) {\n    let cust;\n    this.http.post(this.apiUrl + \"customers/add\", customer).subscribe({\n      next: customerR => {\n        cust = customerR;\n      },\n      error: err => {\n        throwError(() => new Error(err));\n      }\n    });\n    return of(cust);\n  }\n  registerCommand(customerId, cmd) {\n    let command;\n    this.http.post(this.apiUrl + \"/commands/addFor/\" + customerId, cmd).subscribe({\n      next: comd => {\n        command = comd;\n        return of(command);\n      },\n      error: err => throwError(() => new Error(err))\n    });\n  }\n  setCommandLines(cmdLines) {\n    if (cmdLines.length > 0) {\n      cmdLines.forEach(cmdLine => {\n        this.commandLineList.push(cmdLine);\n      });\n    }\n  }\n  getCommands() {\n    if (this.commandList.length == 0) return throwError(() => new Error(\"Command List is empty\"));\n    return of(this.commandList);\n  }\n  getCommandLines() {\n    if (this.commandLineList.length == 0) return throwError(() => new Error(\"Command Line list is empty.\"));\n    return of(this.commandLineList);\n  }\n  setCommandPassed() {\n    this.commandPassed = true;\n  }\n  isCommandPassed() {\n    return this.commandPassed;\n  }\n}\nCommandService.ɵfac = function CommandService_Factory(t) {\n  return new (t || CommandService)(i0.ɵɵinject(i1.HttpClient));\n};\nCommandService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CommandService,\n  factory: CommandService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["of","throwError","CommandService","constructor","http","addCommand","cmd","undefined","Error","post","apiUrl","customer","subscribe","next","customerId","value1","error","err","commandList","push","setCommandPassed","registerCustomer","cust","customerR","registerCommand","command","comd","setCommandLines","cmdLines","length","forEach","cmdLine","commandLineList","getCommands","getCommandLines","commandPassed","isCommandPassed","factory","providedIn"],"sourceRoot":"","sources":["D:\\ESIG GLOBAL SUCCESS - PARCOURS\\ESIG LICENCE 2 - Génie Logiciel\\ESIG Licence 2 - SEMESTRE 4\\Licence 2 - Complement Web\\TRAVAIL DE M. AGBO - COMPLEMENT DEVELOPPEMENT\\MyWork\\FreshFoodsOnline\\src\\app\\services\\command.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Command } from '../shared/model/command';\nimport { CommandLine } from '../shared/model/command-line';\nimport { Observable, of, throwError } from 'rxjs';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Customer} from \"../shared/model/customer\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommandService {\n\n  private commandList: Command[] = [];\n  private commandLineList: CommandLine[] = [];\n  public commandPassed: boolean = false;\n\n  apiUrl = \"http://localhost:8080/api/\"\n\n  constructor(private http: HttpClient) { }\n\n  public addCommand(cmd : Command): Observable<Command>{\n    if (cmd == undefined) return throwError(() => new Error(\"Command add failed\"));\n    this.http.post<Customer>(this.apiUrl + \"customers/add\", cmd.customer).subscribe({\n      next: customer => {\n\n        this.http.post(this.apiUrl + \"/commands/addFor/\" + customer.customerId, cmd).subscribe({\n          next: value1 => {\n\n          }\n        });\n      },\n      error: err => throwError(() => new Error(err))\n    });\n    this.commandList.push(cmd);\n    this.setCommandPassed();\n    return of(cmd);\n  }\n\n  private registerCustomer(customer: Customer): Observable<Customer>{\n    let cust! : Customer;\n    this.http.post<Customer>(this.apiUrl + \"customers/add\", customer).subscribe({\n      next: customerR => {\n        cust = customerR;\n      },\n      error: err => {\n        throwError(() => new Error(err))\n      }\n    });\n    return of(cust);\n  }\n\n  private registerCommand(customerId: number, cmd: Command): Observable<Command>{\n    let command! : Command;\n    this.http.post<Command>(this.apiUrl + \"/commands/addFor/\" + customerId, cmd).subscribe({\n      next: comd => {\n        command = comd;\n        return of(command);\n      },\n      error: err => throwError(() => new Error(err))\n    });\n  }\n\n  public setCommandLines(cmdLines : CommandLine[]){\n    if (cmdLines.length > 0) {\n      cmdLines.forEach(cmdLine => {\n        this.commandLineList.push(cmdLine);\n      })\n    }\n  }\n\n  public getCommands(): Observable<Command[]>{\n    if (this.commandList.length == 0) return throwError(() => new Error(\"Command List is empty\"));\n    return of(this.commandList);\n  }\n\n  public getCommandLines(): Observable<CommandLine[]>{\n    if (this.commandLineList.length == 0) return throwError(() => new Error(\"Command Line list is empty.\"));\n    return of(this.commandLineList);\n  }\n  private setCommandPassed(){\n    this.commandPassed = true;\n  }\n  public isCommandPassed(): boolean{\n    return this.commandPassed\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}