{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor() {\n      this.cardFoodsList = [];\n      this.cardCommandLinesList = [];\n    }\n    addToCart(prod) {\n      this.cardFoodsList.push(prod);\n      /*this.cardFoodsList.forEach(f => {\r\n        this.cardCommandLinesList.forEach(c => {\r\n          const existingCommandLine = this.cardCommandLinesList\r\n            .findIndex(commandLine => commandLine.food.foodId == food.foodId);\r\n          if (existingCommandLine) {\r\n            this.cardCommandLinesList[existingCommandLine].quantity++;\r\n            this.cardCommandLinesList[existingCommandLine].totalCommandLinePrice += food.price;\r\n          } else {\r\n            let commandLine: CommandLine = {\r\n              commandLineId: \"\",\r\n              food: f,\r\n              commandId: \"\",\r\n              unitPrice: f.price,\r\n              quantity: 1,\r\n              totalCommandLinePrice: f.price\r\n            };\r\n            this.cardCommandLinesList.push(commandLine);\r\n          }\r\n        });\r\n        })*/\n      // Recherche d'une ligne de commande comportant deja cette Food\n      const existingCommandLineIndex = this.cardCommandLinesList.findIndex(cmdLine => cmdLine.product.foodId === prod.foodId);\n      if (existingCommandLineIndex != -1) {\n        this.cardCommandLinesList[existingCommandLineIndex].quantity++;\n        this.cardCommandLinesList[existingCommandLineIndex].totalCommandLinePrice += prod.price;\n      } else {\n        let commandLine = {\n          commandLineId: \"\",\n          product: prod,\n          commandId: \"\",\n          unitPrice: prod.price,\n          quantity: 1,\n          totalCommandLinePrice: prod.price\n        };\n        this.cardCommandLinesList.push(commandLine);\n      }\n    }\n    addCommandLinesToTheCart(cmdLines) {\n      cmdLines.forEach(cmdLine => {\n        this.cardCommandLinesList.push(cmdLine);\n      });\n      return of(true);\n    }\n    getCartCmdLinesFoods() {\n      if (this.cardFoodsList.length > 0) {\n        return of(this.cardCommandLinesList);\n      } else {\n        return throwError(() => new Error(\"Food untifined in the cart list.\"));\n      }\n    }\n    getTotalPrice() {\n      let price = 0;\n      this.cardCommandLinesList.forEach(cmdLine => {\n        price += cmdLine.totalCommandLinePrice;\n      });\n      return of(price);\n    }\n    deleteComandeLine(commandLineId) {\n      this.cardCommandLinesList = this.cardCommandLinesList.filter(c => c.commandLineId == commandLineId);\n      return of(true);\n    }\n    deleteFoodById(id) {\n      this.cardFoodsList = this.cardFoodsList.filter(prod => prod.foodId == id);\n      return of(true);\n    }\n    cardContainAddFoods() {\n      return this.cardFoodsList.length > 0;\n    }\n  }\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)();\n  };\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}