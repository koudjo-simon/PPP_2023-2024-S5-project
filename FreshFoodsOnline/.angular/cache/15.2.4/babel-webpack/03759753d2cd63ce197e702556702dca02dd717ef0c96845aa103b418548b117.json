{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/command.service\";\nimport * as i2 from \"@angular/router\";\nexport class CommandGuard {\n  constructor(cmdService, router) {\n    this.cmdService = cmdService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    let commandPassed = this.cmdService.isCommandPassed();\n    if (commandPassed == false) {\n      this.router.navigateByUrl(\"/client/food\");\n      return false;\n    }\n    return true;\n  }\n}\nCommandGuard.ɵfac = function CommandGuard_Factory(t) {\n  return new (t || CommandGuard)(i0.ɵɵinject(i1.CommandService), i0.ɵɵinject(i2.Router));\n};\nCommandGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CommandGuard,\n  factory: CommandGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,YAAY;EAEvBC,YAAoBC,UAA0B,EACpCC,MAAc;IADJ,eAAU,GAAVD,UAAU;IACpB,WAAM,GAANC,MAAM;EAAU;EAE1BC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IACxB,IAAIC,aAAa,GAAY,IAAI,CAACL,UAAU,CAACM,eAAe,EAAE;IAC9D,IAAID,aAAa,IAAI,KAAK,EAAE;MAC1B,IAAI,CAACJ,MAAM,CAACM,aAAa,CAAC,cAAc,CAAC;MACzC,OAAO,KAAK;;IAEhB,OAAO,IAAI;EACb;;AAdWT,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAU,SAAZV,YAAY;EAAAW,YAFX;AAAM","names":["CommandGuard","constructor","cmdService","router","canActivate","route","state","commandPassed","isCommandPassed","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["D:\\PROJETS\\PPP - 2023_2024\\FreshFoodsOnline\\src\\app\\module-client\\client-guards\\command.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { CommandService } from 'src/app/services/command.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommandGuard implements CanActivate {\r\n\r\n  constructor(private cmdService: CommandService,\r\n    private router: Router){}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n      let commandPassed: boolean = this.cmdService.isCommandPassed();\r\n      if (commandPassed == false) {\r\n        this.router.navigateByUrl(\"/client/food\");\r\n        return false;\r\n      }\r\n    return true;\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}