{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor() {\n      this.users = [];\n      this.users.push({\n        id: 1,\n        username: \"user1\",\n        email: \"oks@gmail.com\",\n        password: \"1234\",\n        roles: [\"USER\"]\n      });\n      this.users.push({\n        id: 2,\n        username: \"user2\",\n        email: \"robinson@gmail.com\",\n        password: \"1234\",\n        roles: [\"USER\"]\n      });\n      this.users.push({\n        id: 3,\n        username: \"admin\",\n        email: \"petro@gmail.com\",\n        password: \"1234\",\n        roles: [\"ADMIN\", \"USER\"]\n      });\n    }\n    login(username, password) {\n      let admin = this.users.find(u => u.username == username);\n      if (!admin) return throwError(() => new Error(\"User not found\"));\n      if (admin.password != password) return throwError(() => new Error(\"Bad credentials\"));\n      return of(admin);\n    }\n    authenticateUser(admin) {\n      this.authenticatedUser = admin;\n      localStorage.setItem(\"authUser\", JSON.stringify({\n        username: admin.username,\n        roles: admin.roles,\n        jwt: \"JWT_TOKEN\"\n      }));\n      return of(true);\n    }\n    hasRole(role) {\n      return this.authenticatedUser.roles.includes(role);\n    }\n    isAuthenticated() {\n      return this.authenticatedUser != undefined;\n    }\n    getAuthenticatedUser() {\n      if (this.authenticatedUser == undefined) return throwError(() => new Error(\"Undefined authenticated user.\"));\n      return of(this.authenticatedUser);\n    }\n    logout() {\n      this.authenticatedUser = undefined;\n      localStorage.removeItem(\"authUser\");\n      return of(true);\n    }\n  }\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)();\n  };\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}