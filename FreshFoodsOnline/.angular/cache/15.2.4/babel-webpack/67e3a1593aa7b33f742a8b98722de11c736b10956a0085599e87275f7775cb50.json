{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./cart.service\";\nexport class CommandService {\n  constructor(http, cartService) {\n    this.http = http;\n    this.cartService = cartService;\n    this.commandList = [];\n    this.commandLineList = [];\n    this.commandPassed = false;\n    this.apiUrl = \"http://localhost:8080/api/\";\n    cartService.getCartCmdLinesFoods().subscribe({\n      next: value => console.log(\"Getting command lines of the cart\")\n    });\n  }\n  addCommand(cmd) {\n    if (cmd == undefined) return throwError(() => new Error(\"Command add failed\"));\n    /*const cust: Customer = {\r\n      customerId: \"\",\r\n      firstname: cmd.customer.firstname,\r\n      age: cmd.customer.age,\r\n          }*/\n    this.http.post(this.apiUrl + \"customers/add\", cmd.customer).subscribe({\n      next: customer => {\n        console.log(\"My customerId: \" + customer.customerId);\n        this.http.get(this.apiUrl + \"commands/addFor/\" + customer.customerId).subscribe({\n          next: command => {\n            this.commandLineList.forEach(commandLine => {\n              this.http.post(this.apiUrl + \"/commandLine/add\", {\n                foodId: commandLine.food.foodId,\n                commandId: command.commandId,\n                quantity: commandLine.quantity\n              }).subscribe({\n                next: cmdLine => {\n                  console.log(\"The command passed successfully\");\n                },\n                error: err => throwError(() => new Error(err))\n              });\n            });\n          }\n        });\n      },\n      error: err => throwError(() => new Error(err))\n    });\n    return of(cmd);\n  }\n  setCommandLines(cmdLines) {\n    if (cmdLines.length > 0) {\n      cmdLines.forEach(cmdLine => {\n        this.commandLineList.push(cmdLine);\n      });\n    }\n  }\n  getCommands() {\n    if (this.commandList.length == 0) return throwError(() => new Error(\"Command List is empty\"));\n    return of(this.commandList);\n  }\n  getCommandLines() {\n    if (this.commandLineList.length == 0) return throwError(() => new Error(\"Command Line list is empty.\"));\n    return of(this.commandLineList);\n  }\n  setCommandPassed() {\n    this.commandPassed = true;\n  }\n  isCommandPassed() {\n    return this.commandPassed;\n  }\n}\nCommandService.ɵfac = function CommandService_Factory(t) {\n  return new (t || CommandService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CartService));\n};\nCommandService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CommandService,\n  factory: CommandService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAoBA,EAAE,EAAEC,UAAU,QAAO,MAAM;;;;AAQ/C,OAAM,MAAOC,cAAc;EAQzBC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IANjD,gBAAW,GAAc,EAAE;IAC3B,oBAAe,GAAkB,EAAE;IACpC,kBAAa,GAAY,KAAK;IAErC,WAAM,GAAG,4BAA4B;IAGnCA,WAAW,CAACC,oBAAoB,EAAE,CAACC,SAAS,CAAC;MAC3CC,IAAI,EAAEC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAAC,mCAAmC;KAC/D,CAAC;EACJ;EAEOC,UAAU,CAACC,GAAY;IAC5B,IAAIA,GAAG,IAAIC,SAAS,EAAE,OAAOb,UAAU,CAAC,MAAM,IAAIc,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAC9E;;;;;IAMA,IAAI,CAACX,IAAI,CAACY,IAAI,CAAW,IAAI,CAACC,MAAM,GAAG,eAAe,EAAEJ,GAAG,CAACK,QAAQ,CAAC,CAACX,SAAS,CAAC;MAC9EC,IAAI,EAAEU,QAAQ,IAAG;QACfR,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAGO,QAAQ,CAACC,UAAU,CAAC;QACpD,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAU,IAAI,CAACH,MAAM,GAAG,kBAAkB,GAAGC,QAAQ,CAACC,UAAU,CAAC,CAACZ,SAAS,CAAC;UACvFC,IAAI,EAAEa,OAAO,IAAG;YACd,IAAI,CAACC,eAAe,CAACC,OAAO,CAACC,WAAW,IAAG;cACzC,IAAI,CAACpB,IAAI,CAACY,IAAI,CAAc,IAAI,CAACC,MAAM,GAAG,kBAAkB,EAC1D;gBACEQ,MAAM,EAAED,WAAW,CAACE,IAAI,CAACD,MAAM;gBAC/BE,SAAS,EAAEN,OAAO,CAACM,SAAS;gBAC5BC,QAAQ,EAAEJ,WAAW,CAACI;eACvB,CAAC,CAACrB,SAAS,CAAC;gBACbC,IAAI,EAAEqB,OAAO,IAAG;kBACdnB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;gBAChD,CAAC;gBACDmB,KAAK,EAAEC,GAAG,IAAI9B,UAAU,CAAC,MAAM,IAAIc,KAAK,CAACgB,GAAG,CAAC;eAC9C,CAAC;YACJ,CAAC,CAAC;UACJ;SACD,CAAC;MACJ,CAAC;MACDD,KAAK,EAAEC,GAAG,IAAI9B,UAAU,CAAC,MAAM,IAAIc,KAAK,CAACgB,GAAG,CAAC;KAC9C,CAAC;IACF,OAAO/B,EAAE,CAACa,GAAG,CAAC;EAChB;EAEOmB,eAAe,CAACC,QAAuB;IAC5C,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;MACvBD,QAAQ,CAACV,OAAO,CAACM,OAAO,IAAG;QACzB,IAAI,CAACP,eAAe,CAACa,IAAI,CAACN,OAAO,CAAC;MACpC,CAAC,CAAC;;EAEN;EAEOO,WAAW;IAChB,IAAI,IAAI,CAACC,WAAW,CAACH,MAAM,IAAI,CAAC,EAAE,OAAOjC,UAAU,CAAC,MAAM,IAAIc,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC7F,OAAOf,EAAE,CAAC,IAAI,CAACqC,WAAW,CAAC;EAC7B;EAEOC,eAAe;IACpB,IAAI,IAAI,CAAChB,eAAe,CAACY,MAAM,IAAI,CAAC,EAAE,OAAOjC,UAAU,CAAC,MAAM,IAAIc,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACvG,OAAOf,EAAE,CAAC,IAAI,CAACsB,eAAe,CAAC;EACjC;EAEQiB,gBAAgB;IACtB,IAAI,CAACC,aAAa,GAAG,IAAI;EAC3B;EAEOC,eAAe;IACpB,OAAO,IAAI,CAACD,aAAa;EAC3B;;AAxEWtC,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAwC,SAAdxC,cAAc;EAAAyC,YAFb;AAAM","names":["of","throwError","CommandService","constructor","http","cartService","getCartCmdLinesFoods","subscribe","next","value","console","log","addCommand","cmd","undefined","Error","post","apiUrl","customer","customerId","get","command","commandLineList","forEach","commandLine","foodId","food","commandId","quantity","cmdLine","error","err","setCommandLines","cmdLines","length","push","getCommands","commandList","getCommandLines","setCommandPassed","commandPassed","isCommandPassed","factory","providedIn"],"sourceRoot":"","sources":["D:\\ESIG GLOBAL SUCCESS - PARCOURS\\ESIG LICENCE 2 - Génie Logiciel\\ESIG Licence 2 - SEMESTRE 4\\Licence 2 - Complement Web\\TRAVAIL DE M. AGBO - COMPLEMENT DEVELOPPEMENT\\MyWork\\FreshFoodsOnline\\src\\app\\services\\command.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Command} from '../shared/model/command';\nimport {CommandLine} from '../shared/model/command-line';\nimport {Observable, of, throwError} from 'rxjs';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Customer} from \"../shared/model/customer\";\nimport {CartService} from \"./cart.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommandService {\n\n  private commandList: Command[] = [];\n  private commandLineList: CommandLine[] = [];\n  public commandPassed: boolean = false;\n\n  apiUrl = \"http://localhost:8080/api/\"\n\n  constructor(private http: HttpClient, private cartService: CartService) {\n    cartService.getCartCmdLinesFoods().subscribe({\n      next: value => console.log(\"Getting command lines of the cart\")\n    })\n  }\n\n  public addCommand(cmd: Command): Observable<Command> {\n    if (cmd == undefined) return throwError(() => new Error(\"Command add failed\"));\n    /*const cust: Customer = {\n      customerId: \"\",\n      firstname: cmd.customer.firstname,\n      age: cmd.customer.age,\n\n    }*/\n    this.http.post<Customer>(this.apiUrl + \"customers/add\", cmd.customer).subscribe({\n      next: customer => {\n        console.log(\"My customerId: \" + customer.customerId)\n        this.http.get<Command>(this.apiUrl + \"commands/addFor/\" + customer.customerId).subscribe({\n          next: command => {\n            this.commandLineList.forEach(commandLine => {\n              this.http.post<CommandLine>(this.apiUrl + \"/commandLine/add\",\n                {\n                  foodId: commandLine.food.foodId,\n                  commandId: command.commandId,\n                  quantity: commandLine.quantity\n                }).subscribe({\n                next: cmdLine => {\n                  console.log(\"The command passed successfully\");\n                },\n                error: err => throwError(() => new Error(err))\n              })\n            })\n          }\n        });\n      },\n      error: err => throwError(() => new Error(err))\n    });\n    return of(cmd)\n  }\n\n  public setCommandLines(cmdLines: CommandLine[]) {\n    if (cmdLines.length > 0) {\n      cmdLines.forEach(cmdLine => {\n        this.commandLineList.push(cmdLine);\n      })\n    }\n  }\n\n  public getCommands(): Observable<Command[]> {\n    if (this.commandList.length == 0) return throwError(() => new Error(\"Command List is empty\"));\n    return of(this.commandList);\n  }\n\n  public getCommandLines(): Observable<CommandLine[]> {\n    if (this.commandLineList.length == 0) return throwError(() => new Error(\"Command Line list is empty.\"));\n    return of(this.commandLineList);\n  }\n\n  private setCommandPassed() {\n    this.commandPassed = true;\n  }\n\n  public isCommandPassed(): boolean {\n    return this.commandPassed\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}