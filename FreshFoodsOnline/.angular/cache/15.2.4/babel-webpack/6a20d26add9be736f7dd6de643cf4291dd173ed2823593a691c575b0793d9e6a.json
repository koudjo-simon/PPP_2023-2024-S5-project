{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\n// import { CommandService } from '../../services/command.service';\nlet CartComponent = class CartComponent {\n  constructor(cartService, cmdService) {\n    this.cartService = cartService;\n    this.cmdService = cmdService;\n    this.selectedFoods = [];\n    this.totalPrice = 0;\n    this.commandLines = [];\n  }\n  ngOnInit() {\n    this.cartService.getCartFoods().subscribe({\n      next: foods => {\n        this.selectedFoods = foods;\n        // Transformation des foods en ligne de commande\n        this.selectedFoods.forEach(food => {\n          const existingCommandLine = this.commandLines.find(cl => cl.food.id === food.id);\n          if (existingCommandLine) {\n            existingCommandLine.quantity += 1;\n            existingCommandLine.totalPrice += food.price;\n          } else {\n            const newCommandeLine = {\n              food,\n              quantity: 1,\n              totalPrice: food.price\n            };\n            this.commandLines.push(newCommandeLine);\n          }\n        });\n        // Ajout des lignes de commandes à la liste dans commandService\n        //this.cmdService.setCommandLines(this.commandLines);\n      },\n\n      error: err => console.log(err)\n    });\n  }\n  handleDeleteFood(f) {\n    let conf = confirm(\"Are you sure to delete this food ?\");\n    if (conf == false) return;\n    this.cartService.deleteFoodById(f.food.id).subscribe({\n      next: data => {\n        let index = this.commandLines.indexOf(f);\n        this.selectedFoods.splice(index, 1);\n      }\n    });\n  }\n  command() {}\n};\nCartComponent = __decorate([Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.scss']\n})], CartComponent);\nexport { CartComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAIjD;AAOO,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAMxBC,YAAoBC,WAAwB,EAAUC,UAA0B;IAA5D,gBAAW,GAAXD,WAAW;IAAuB,eAAU,GAAVC,UAAU;IAJzD,kBAAa,GAAY,EAAE;IAC3B,eAAU,GAAW,CAAC;IACtB,iBAAY,GAAkB,EAAE;EAE2C;EAElFC,QAAQ;IACN,IAAI,CAACF,WAAW,CAACG,YAAY,EAAE,CAACC,SAAS,CAAC;MACxCC,IAAI,EAAGC,KAAK,IAAI;QACd,IAAI,CAACC,aAAa,GAAGD,KAAK;QAE1B;QACA,IAAI,CAACC,aAAa,CAACC,OAAO,CAAEC,IAAI,IAAI;UAClC,MAAMC,mBAAmB,GAAG,IAAI,CAACC,YAAY,CAACC,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACJ,IAAI,CAACK,EAAE,KAAKL,IAAI,CAACK,EAAE,CAAC;UAClF,IAAIJ,mBAAmB,EAAE;YACvBA,mBAAmB,CAACK,QAAQ,IAAI,CAAC;YACjCL,mBAAmB,CAACM,UAAU,IAAIP,IAAI,CAACQ,KAAK;WAC7C,MAAK;YACJ,MAAMC,eAAe,GAAiB;cACpCT,IAAI;cACJM,QAAQ,EAAE,CAAC;cACXC,UAAU,EAAEP,IAAI,CAACQ;aAClB;YACD,IAAI,CAACN,YAAY,CAACQ,IAAI,CAACD,eAAe,CAAC;;QAE3C,CAAC,CAAC;QAEF;QACA;MACF,CAAC;;MACDE,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG;KAChC,CAAC;EACJ;EAEAG,gBAAgB,CAACC,CAAc;IAC7B,IAAIC,IAAI,GAAGC,OAAO,CAAC,oCAAoC,CAAC;IACxD,IAAID,IAAI,IAAI,KAAK,EAAE;IACnB,IAAI,CAAC1B,WAAW,CAAC4B,cAAc,CAACH,CAAC,CAAChB,IAAI,CAACK,EAAE,CAAC,CAACV,SAAS,CAAC;MACnDC,IAAI,EAAGwB,IAAI,IAAI;QACb,IAAIC,KAAK,GAAG,IAAI,CAACnB,YAAY,CAACoB,OAAO,CAACN,CAAC,CAAC;QACxC,IAAI,CAAClB,aAAa,CAACyB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACrC;KACD,CAAC;EACJ;EAEAG,OAAO,IAEP;CAED;AAnDYnC,aAAa,eALzBD,SAAS,CAAC;EACTqC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWtC,aAAa,CAmDzB;SAnDYA,aAAa","names":["Component","CartComponent","constructor","cartService","cmdService","ngOnInit","getCartFoods","subscribe","next","foods","selectedFoods","forEach","food","existingCommandLine","commandLines","find","cl","id","quantity","totalPrice","price","newCommandeLine","push","error","err","console","log","handleDeleteFood","f","conf","confirm","deleteFoodById","data","index","indexOf","splice","command","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\ESIG GLOBAL SUCCESS - PARCOURS\\ESIG LICENCE 2 - Génie Logiciel\\ESIG Licence 2 - SEMESTRE 4\\Licence 2 - Complement Web\\TRAVAIL DE M. AGBO - COMPLEMENT DEVELOPPEMENT\\FreshFoodsOnline\\src\\app\\module-client\\cart\\cart.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CartService } from '../../services/cart.service';\nimport { Foods } from 'src/app/shared/model/food';\nimport { CommandLine } from 'src/app/shared/model/command-line';\n// import { CommandService } from '../../services/command.service';\n\n@Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.scss']\n})\nexport class CartComponent implements OnInit{\n  \n  public selectedFoods: Foods[] = [];\n  public totalPrice: number = 0;\n  public commandLines: CommandLine[] = [];\n\n  constructor(private cartService: CartService, private cmdService: CommandService){}\n  \n  ngOnInit(): void {\n    this.cartService.getCartFoods().subscribe({\n      next: (foods) => {\n        this.selectedFoods = foods;\n\n        // Transformation des foods en ligne de commande\n        this.selectedFoods.forEach((food) => {\n          const existingCommandLine = this.commandLines.find((cl) => cl.food.id === food.id);\n          if (existingCommandLine) {\n            existingCommandLine.quantity += 1;\n            existingCommandLine.totalPrice += food.price;\n          }else {\n            const newCommandeLine : CommandLine = {\n              food,\n              quantity: 1,\n              totalPrice: food.price\n            };\n            this.commandLines.push(newCommandeLine);\n          }\n        });\n\n        // Ajout des lignes de commandes à la liste dans commandService\n        //this.cmdService.setCommandLines(this.commandLines);\n      },\n      error: (err) => console.log(err)\n    })\n  }\n\n  handleDeleteFood(f: CommandLine){\n    let conf = confirm(\"Are you sure to delete this food ?\");\n    if (conf == false) return;\n    this.cartService.deleteFoodById(f.food.id).subscribe({\n      next: (data) => {\n        let index = this.commandLines.indexOf(f);\n        this.selectedFoods.splice(index, 1);\n      }\n    })\n  }\n\n  command(){\n    \n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}