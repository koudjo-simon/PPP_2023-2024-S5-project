{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./cart.service\";\nexport let CommandService = /*#__PURE__*/(() => {\n  class CommandService {\n    constructor(http, cartService) {\n      this.http = http;\n      this.cartService = cartService;\n      this.commandList = [];\n      this.commandLineList = [];\n      this.commandPassed = false;\n      this.apiUrl = \"http://localhost:8080/api/\";\n      cartService.getCartCmdLinesFoods().subscribe({\n        next: value => {\n          this.commandLineList = value;\n          console.log(\"Getting command lines of the cart\");\n        }\n      });\n    }\n    addCommand(cmd) {\n      this.commandList.push(cmd);\n      return of(true);\n      /*if (cmd == undefined) return throwError(() => new Error(\"Command add failed\"));\r\n      /!*const cust: Customer = {\r\n        customerId: \"\",\r\n        firstname: cmd.customer.firstname,\r\n        age: cmd.customer.age,\r\n            }*!/\r\n      this.http.post<Customer>(this.apiUrl + \"customers/add\", cmd.customer).subscribe({\r\n        next: customer => {\r\n          console.log(\"My customerId: \" + customer.customerId)\r\n          this.http.get<Command>(this.apiUrl + \"commands/addFor/\" + customer.customerId)\r\n            .subscribe({\r\n            next: command => {\r\n              console.log(\"Affichage de la list des command Lines: \", this.commandLineList)\r\n              this.commandLineList.forEach(commandLine => {\r\n                this.http.get<CommandLine>(this.apiUrl + \"commandLine/add?foodId=\"\r\n                  + \"1d799841-c54e-4c72-8e2a-842e5214fe1c\" + \"&&commandId=\" + command.commandId +\r\n                  \"&&quantity=\" + commandLine.quantity).subscribe({\r\n                  next: cmdLine => {\r\n                    console.log(\"The command passed successfully\");\r\n                  },\r\n                  error: err => throwError(() => new Error(err))\r\n                })\r\n              })\r\n            }\r\n          });\r\n        },\r\n        error: err => throwError(() => new Error(err))\r\n      });\r\n      return of(cmd)*/\n    }\n\n    setCommandLines(cmdLines) {\n      if (cmdLines.length > 0) {\n        cmdLines.forEach(cmdLine => {\n          this.commandLineList.push(cmdLine);\n        });\n      }\n    }\n    getCommands() {\n      if (this.commandList.length == 0) return throwError(() => new Error(\"Command List is empty\"));\n      return of(this.commandList);\n    }\n    getCommandLines() {\n      if (this.commandLineList.length == 0) return throwError(() => new Error(\"Command Line list is empty.\"));\n      return of(this.commandLineList);\n    }\n    setCommandPassed() {\n      this.commandPassed = true;\n    }\n    isCommandPassed() {\n      return this.commandPassed;\n    }\n  }\n  CommandService.ɵfac = function CommandService_Factory(t) {\n    return new (t || CommandService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CartService));\n  };\n  CommandService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommandService,\n    factory: CommandService.ɵfac,\n    providedIn: 'root'\n  });\n  return CommandService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}