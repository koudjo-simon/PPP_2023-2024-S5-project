{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cardFoodsList = [];\n    this.cardCommandLinesList = [];\n  }\n  addToCart(food) {\n    this.cardFoodsList.push(food);\n    /*this.cardFoodsList.forEach(f => {\r\n      this.cardCommandLinesList.forEach(c => {\r\n        const existingCommandLine = this.cardCommandLinesList\r\n          .findIndex(commandLine => commandLine.food.foodId == food.foodId);\r\n        if (existingCommandLine) {\r\n          this.cardCommandLinesList[existingCommandLine].quantity++;\r\n          this.cardCommandLinesList[existingCommandLine].totalCommandLinePrice += food.price;\r\n        } else {\r\n          let commandLine: CommandLine = {\r\n            commandLineId: \"\",\r\n            food: f,\r\n            commandId: \"\",\r\n            unitPrice: f.price,\r\n            quantity: 1,\r\n            totalCommandLinePrice: f.price\r\n          };\r\n          this.cardCommandLinesList.push(commandLine);\r\n        }\r\n      });\r\n      })*/\n    // Recherche d'une ligne de commande comportant deja cette Food\n    const existingCommandLineIndex = this.cardCommandLinesList.findIndex(cmdLine => cmdLine.food.foodId === food.foodId);\n    if (existingCommandLineIndex != -1) {\n      this.cardCommandLinesList[existingCommandLineIndex].quantity++;\n      this.cardCommandLinesList[existingCommandLineIndex].totalCommandLinePrice += food.price;\n    } else {\n      let commandLine = {\n        commandLineId: \"\",\n        food: food,\n        commandId: \"\",\n        unitPrice: food.price,\n        quantity: 1,\n        totalCommandLinePrice: food.price\n      };\n      this.cardCommandLinesList.push(commandLine);\n    }\n  }\n  addCommandLinesToTheCart(cmdLines) {\n    cmdLines.forEach(cmdLine => {\n      this.cardCommandLinesList.push(cmdLine);\n    });\n    return of(true);\n  }\n  getCartCmdLinesFoods() {\n    if (this.cardFoodsList.length > 0) {\n      return of(this.cardCommandLinesList);\n    } else {\n      return throwError(() => new Error(\"Food untifined in the cart list.\"));\n    }\n  }\n  getTotalPrice() {\n    let price = 0;\n    this.cardCommandLinesList.forEach(cmdLine => {\n      price += cmdLine.totalCommandLinePrice;\n    });\n    return of(price);\n  }\n  deleteComandeLine(commandLineId) {\n    this.cardCommandLinesList = this.cardCommandLinesList.filter(c => c.commandLineId == commandLineId);\n    return of(true);\n  }\n  deleteFoodById(id) {\n    this.cardFoodsList = this.cardFoodsList.filter(f => f.foodId == id);\n    return of(true);\n  }\n  cardContainAddFoods() {\n    return this.cardFoodsList.length > 0;\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAoBA,EAAE,EAAEC,UAAU,QAAO,MAAM;;AAO/C,OAAM,MAAOC,WAAW;EAKtBC;IAHQ,kBAAa,GAAW,EAAE;IAC1B,yBAAoB,GAAkB,EAAE;EAEhC;EAETC,SAAS,CAACC,IAAU;IACzB,IAAI,CAACC,aAAa,CAACC,IAAI,CAACF,IAAI,CAAC;IAC7B;;;;;;;;;;;;;;;;;;;;IAoBA;IACA,MAAMG,wBAAwB,GAAG,IAAI,CAACC,oBAAoB,CACvDC,SAAS,CAACC,OAAO,IAAIA,OAAO,CAACN,IAAI,CAACO,MAAM,KAAKP,IAAI,CAACO,MAAM,CAAC;IAC5D,IAAIJ,wBAAwB,IAAI,CAAC,CAAC,EAAC;MACjC,IAAI,CAACC,oBAAoB,CAACD,wBAAwB,CAAC,CAACK,QAAQ,EAAE;MAC9D,IAAI,CAACJ,oBAAoB,CAACD,wBAAwB,CAAC,CAACM,qBAAqB,IAAIT,IAAI,CAACU,KAAK;KACxF,MAAK;MACJ,IAAIC,WAAW,GAAgB;QAC7BC,aAAa,EAAE,EAAE;QACjBZ,IAAI,EAAEA,IAAI;QACVa,SAAS,EAAE,EAAE;QACbC,SAAS,EAAEd,IAAI,CAACU,KAAK;QACrBF,QAAQ,EAAE,CAAC;QACXC,qBAAqB,EAAET,IAAI,CAACU;OAC7B;MACD,IAAI,CAACN,oBAAoB,CAACF,IAAI,CAACS,WAAW,CAAC;;EAE/C;EAEOI,wBAAwB,CAACC,QAA4B;IAC1DA,QAAQ,CAACC,OAAO,CAACX,OAAO,IAAG;MACzB,IAAI,CAACF,oBAAoB,CAACF,IAAI,CAACI,OAAO,CAAC;IACzC,CAAC,CAAC;IACF,OAAOX,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOuB,oBAAoB;IACzB,IAAI,IAAI,CAACjB,aAAa,CAACkB,MAAM,GAAG,CAAC,EAAE;MACjC,OAAOxB,EAAE,CAAC,IAAI,CAACS,oBAAoB,CAAC;KACrC,MAAM;MACL,OAAOR,UAAU,CAAC,MAAM,IAAIwB,KAAK,CAAC,kCAAkC,CAAC,CAAC;;EAE1E;EAEOC,aAAa;IAClB,IAAIX,KAAK,GAAW,CAAC;IACrB,IAAI,CAACN,oBAAoB,CAACa,OAAO,CAACX,OAAO,IAAG;MAC1CI,KAAK,IAAIJ,OAAO,CAACG,qBAAqB;IACxC,CAAC,CAAC;IACF,OAAOd,EAAE,CAACe,KAAK,CAAC;EAClB;EAEOY,iBAAiB,CAACV,aAAqB;IAC5C,IAAI,CAACR,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,CAACmB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACZ,aAAa,IAAIA,aAAa,CAAC;IACnG,OAAOjB,EAAE,CAAC,IAAI,CAAC;EACjB;EAEO8B,cAAc,CAACC,EAAU;IAC9B,IAAI,CAACzB,aAAa,GAAG,IAAI,CAACA,aAAa,CAACsB,MAAM,CAACI,CAAC,IAAIA,CAAC,CAACpB,MAAM,IAAImB,EAAE,CAAC;IACnE,OAAO/B,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOiC,mBAAmB;IACxB,OAAO,IAAI,CAAC3B,aAAa,CAACkB,MAAM,GAAG,CAAC;EACtC;;AAnFWtB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAgC,SAAXhC,WAAW;EAAAiC,YAFV;AAAM","names":["of","throwError","CartService","constructor","addToCart","food","cardFoodsList","push","existingCommandLineIndex","cardCommandLinesList","findIndex","cmdLine","foodId","quantity","totalCommandLinePrice","price","commandLine","commandLineId","commandId","unitPrice","addCommandLinesToTheCart","cmdLines","forEach","getCartCmdLinesFoods","length","Error","getTotalPrice","deleteComandeLine","filter","c","deleteFoodById","id","f","cardContainAddFoods","factory","providedIn"],"sourceRoot":"","sources":["D:\\ESIG GLOBAL SUCCESS - PARCOURS\\ESIG LICENCE 2 - Génie Logiciel\\ESIG Licence 2 - SEMESTRE 4\\Licence 2 - Complement Web\\TRAVAIL DE M. AGBO - COMPLEMENT DEVELOPPEMENT\\MyWork\\FreshFoodsOnline\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable, of, throwError} from 'rxjs';\nimport {Food} from '../shared/model/food';\nimport {CommandLine} from \"../shared/model/command-line\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  private cardFoodsList: Food[] = [];\n  private cardCommandLinesList: CommandLine[] = [];\n\n  constructor() { }\n\n  public addToCart(food: Food): void {\n    this.cardFoodsList.push(food);\n    /*this.cardFoodsList.forEach(f => {\n      this.cardCommandLinesList.forEach(c => {\n        const existingCommandLine = this.cardCommandLinesList\n          .findIndex(commandLine => commandLine.food.foodId == food.foodId);\n        if (existingCommandLine) {\n          this.cardCommandLinesList[existingCommandLine].quantity++;\n          this.cardCommandLinesList[existingCommandLine].totalCommandLinePrice += food.price;\n        } else {\n          let commandLine: CommandLine = {\n            commandLineId: \"\",\n            food: f,\n            commandId: \"\",\n            unitPrice: f.price,\n            quantity: 1,\n            totalCommandLinePrice: f.price\n          };\n          this.cardCommandLinesList.push(commandLine);\n        }\n      });\n      })*/\n    // Recherche d'une ligne de commande comportant deja cette Food\n    const existingCommandLineIndex = this.cardCommandLinesList\n      .findIndex(cmdLine => cmdLine.food.foodId === food.foodId);\n    if (existingCommandLineIndex != -1){\n      this.cardCommandLinesList[existingCommandLineIndex].quantity++;\n      this.cardCommandLinesList[existingCommandLineIndex].totalCommandLinePrice += food.price;\n    }else {\n      let commandLine: CommandLine = {\n        commandLineId: \"\",\n        food: food,\n        commandId: \"\",\n        unitPrice: food.price,\n        quantity: 1,\n        totalCommandLinePrice: food.price\n      };\n      this.cardCommandLinesList.push(commandLine);\n    }\n  }\n\n  public addCommandLinesToTheCart(cmdLines: Array<CommandLine>): Observable<boolean> {\n    cmdLines.forEach(cmdLine => {\n      this.cardCommandLinesList.push(cmdLine)\n    });\n    return of(true);\n  }\n\n  public getCartCmdLinesFoods(): Observable<CommandLine[]> {\n    if (this.cardFoodsList.length > 0) {\n      return of(this.cardCommandLinesList);\n    } else {\n      return throwError(() => new Error(\"Food untifined in the cart list.\"));\n    }\n  }\n\n  public getTotalPrice(): Observable<number> {\n    let price: number = 0;\n    this.cardCommandLinesList.forEach(cmdLine => {\n      price += cmdLine.totalCommandLinePrice;\n    });\n    return of(price);\n  }\n\n  public deleteComandeLine(commandLineId: string): Observable<boolean> {\n    this.cardCommandLinesList = this.cardCommandLinesList.filter(c => c.commandLineId == commandLineId);\n    return of(true);\n  }\n\n  public deleteFoodById(id: string): Observable<boolean> {\n    this.cardFoodsList = this.cardFoodsList.filter(f => f.foodId == id);\n    return of(true);\n  }\n\n  public cardContainAddFoods() {\n    return this.cardFoodsList.length > 0;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}