{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cardFoodsList = [];\n    this.cardCommandLinesList = [];\n  }\n  addToCart(food) {\n    this.cardFoodsList.push(food);\n  }\n  addCommandLinesToTheCart(cmdLines) {\n    cmdLines.forEach(cmdLine => {\n      this.cardCommandLinesList.push(cmdLine);\n    });\n    return of(true);\n  }\n  getCartFoods() {\n    if (this.cardFoodsList.length > 0) {\n      return of(this.cardFoodsList);\n    } else {\n      return throwError(() => new Error(\"Food untifined in the cart list.\"));\n    }\n  }\n  getTotalPrice() {\n    let price = 0;\n    this.cardFoodsList.forEach(element => {\n      price += element.price;\n    });\n    return of(price);\n  }\n  deleteComandeLine(commandLineId) {\n    this.cardCommandLinesList = this.cardCommandLinesList.filter(c => c.commandLineId == commandLineId);\n    return of(true);\n  }\n  deleteFoodById(id) {\n    this.cardFoodsList = this.cardFoodsList.filter(f => f.foodId == id);\n    return of(true);\n  }\n  cardContainAddFoods() {\n    return this.cardFoodsList.length > 0;\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,EAAE,EAAEC,UAAU,QAAQ,MAAM;;AAOjD,OAAM,MAAOC,WAAW;EAKtBC;IAHQ,kBAAa,GAAW,EAAE;IAC1B,yBAAoB,GAAkB,EAAE;EAIhD;EAEOC,SAAS,CAACC,IAAU;IACzB,IAAI,CAACC,aAAa,CAACC,IAAI,CAACF,IAAI,CAAC;EAC/B;EAEOG,wBAAwB,CAACC,QAA4B;IAC1DA,QAAQ,CAACC,OAAO,CAACC,OAAO,IAAG;MACzB,IAAI,CAACC,oBAAoB,CAACL,IAAI,CAACI,OAAO,CAAC;IACzC,CAAC,CAAC;IACF,OAAOX,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOa,YAAY;IACjB,IAAI,IAAI,CAACP,aAAa,CAACQ,MAAM,GAAG,CAAC,EAAE;MACjC,OAAOd,EAAE,CAAC,IAAI,CAACM,aAAa,CAAC;KAC9B,MAAK;MACJ,OAAOL,UAAU,CAAC,MAAM,IAAIc,KAAK,CAAC,kCAAkC,CAAC,CAAC;;EAE1E;EAEOC,aAAa;IAClB,IAAIC,KAAK,GAAW,CAAC;IACrB,IAAI,CAACX,aAAa,CAACI,OAAO,CAACQ,OAAO,IAAG;MACnCD,KAAK,IAAIC,OAAO,CAACD,KAAK;IACxB,CAAC,CAAC;IACF,OAAOjB,EAAE,CAACiB,KAAK,CAAC;EAClB;EAEOE,iBAAiB,CAACC,aAAqB;IAC5C,IAAI,CAACR,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,CAACS,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACF,aAAa,IAAIA,aAAa,CAAC;IACnG,OAAOpB,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOuB,cAAc,CAACC,EAAU;IAC9B,IAAI,CAAClB,aAAa,GAAG,IAAI,CAACA,aAAa,CAACe,MAAM,CAACI,CAAC,IAAIA,CAAC,CAACC,MAAM,IAAIF,EAAE,CAAC;IACnE,OAAOxB,EAAE,CAAC,IAAI,CAAC;EACjB;EAEO2B,mBAAmB;IACxB,OAAO,IAAI,CAACrB,aAAa,CAACQ,MAAM,GAAG,CAAC;EACtC;;AAhDWZ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;EAAA2B,YAFV;AAAM","names":["of","throwError","CartService","constructor","addToCart","food","cardFoodsList","push","addCommandLinesToTheCart","cmdLines","forEach","cmdLine","cardCommandLinesList","getCartFoods","length","Error","getTotalPrice","price","element","deleteComandeLine","commandLineId","filter","c","deleteFoodById","id","f","foodId","cardContainAddFoods","factory","providedIn"],"sourceRoot":"","sources":["D:\\ESIG GLOBAL SUCCESS - PARCOURS\\ESIG LICENCE 2 - Génie Logiciel\\ESIG Licence 2 - SEMESTRE 4\\Licence 2 - Complement Web\\TRAVAIL DE M. AGBO - COMPLEMENT DEVELOPPEMENT\\MyWork\\FreshFoodsOnline\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { Food } from '../shared/model/food';\nimport {CommandLine} from \"../shared/model/command-line\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  private cardFoodsList: Food[] = [];\n  private cardCommandLinesList: CommandLine[] = [];\n\n  constructor() {\n\n  }\n\n  public addToCart(food: Food): void {\n    this.cardFoodsList.push(food);\n  }\n\n  public addCommandLinesToTheCart(cmdLines: Array<CommandLine>): Observable<boolean>{\n    cmdLines.forEach(cmdLine => {\n      this.cardCommandLinesList.push(cmdLine)\n    });\n    return of(true);\n  }\n\n  public getCartFoods(): Observable<Food[]>{\n    if (this.cardFoodsList.length > 0) {\n      return of(this.cardFoodsList);\n    }else {\n      return throwError(() => new Error(\"Food untifined in the cart list.\"));\n    }\n  }\n\n  public getTotalPrice(): Observable<number>{\n    let price: number = 0;\n    this.cardFoodsList.forEach(element => {\n      price += element.price;\n    });\n    return of(price);\n  }\n\n  public deleteComandeLine(commandLineId: string): Observable<boolean> {\n    this.cardCommandLinesList = this.cardCommandLinesList.filter(c => c.commandLineId == commandLineId);\n    return of(true);\n  }\n\n  public deleteFoodById(id: string): Observable<boolean>{\n    this.cardFoodsList = this.cardFoodsList.filter(f => f.foodId == id);\n    return of(true);\n  }\n\n  public cardContainAddFoods(){\n    return this.cardFoodsList.length > 0;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}