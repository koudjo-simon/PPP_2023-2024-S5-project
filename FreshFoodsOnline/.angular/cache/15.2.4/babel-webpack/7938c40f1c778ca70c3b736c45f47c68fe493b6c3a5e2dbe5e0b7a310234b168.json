{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cardFoodsList = [];\n    this.foodCompactList = [];\n  }\n  addToCart(food) {\n    this.cardFoodsList.push(food);\n  }\n  getCartFoods() {\n    if (this.foodCompactList.length > 0) {\n      return of(this.foodCompactList);\n    } else {\n      return throwError(() => new Error(\"Food untifined in the cart list.\"));\n    }\n  }\n  deleteFoodById(id) {\n    this.cardFoodsList = this.cardFoodsList.filter(f => f.id == id);\n    return of(true);\n  }\n  compactSelectedFoodList(foods) {\n    let count;\n    foods.forEach(f => {\n      if (count[f.id]) {\n        count.map;\n      }\n    });\n    // Exemple de liste d'objets\n    const produits = [{\n      nom: \"Pommes\",\n      quantite: 5\n    }, {\n      nom: \"Oranges\",\n      quantite: 2\n    }, {\n      nom: \"Pommes\",\n      quantite: 3\n    }, {\n      nom: \"Bananes\",\n      quantite: 1\n    }, {\n      nom: \"Oranges\",\n      quantite: 4\n    }];\n    // Initialisation de l'objet des comptages\n    const comptages = {};\n    // Boucle sur chaque objet dans la liste\n    produits.forEach(function (produit) {\n      // Si le nom du produit existe déjà dans l'objet des comptages, on ajoute la quantité à la valeur existante\n      if (comptages[produit.nom]) {\n        comptages[produit.nom] += produit.quantite;\n      }\n      // Sinon, on crée une nouvelle entrée pour ce produit\n      else {\n        comptages[produit.nom] = produit.quantite;\n      }\n    });\n    // Affichage des comptages\n    for (let produit in comptages) {\n      console.log(`${produit} : ${comptages[produit]}`);\n    }\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,EAAEC,UAAU,QAAQ,MAAM;;AAOjD,OAAM,MAAOC,WAAW;EAKtBC;IAHQ,kBAAa,GAAY,EAAE;IAC3B,oBAAe,GAAa,EAAE;EAItC;EAEOC,SAAS,CAACC,IAAW;IAC1B,IAAI,CAACC,aAAa,CAACC,IAAI,CAACF,IAAI,CAAC;EAC/B;EAEOG,YAAY;IACjB,IAAI,IAAI,CAACC,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;MACnC,OAAOV,EAAE,CAAC,IAAI,CAACS,eAAe,CAAC;KAChC,MAAK;MACJ,OAAOR,UAAU,CAAC,MAAM,IAAIU,KAAK,CAAC,kCAAkC,CAAC,CAAC;;EAE1E;EAEOC,cAAc,CAACC,EAAU;IAC9B,IAAI,CAACP,aAAa,GAAG,IAAI,CAACA,aAAa,CAACQ,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,IAAIA,EAAE,CAAC;IAC/D,OAAOb,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOgB,uBAAuB,CAACC,KAAc;IAE3C,IAAIC,KAAiB;IAErBD,KAAK,CAACE,OAAO,CAAEJ,CAAC,IAAI;MAClB,IAAIG,KAAK,CAACH,CAAC,CAACF,EAAE,CAAC,EAAE;QACfK,KAAK,CAACE,GAAG;;IAEb,CAAC,CAAC;IAGF;IACA,MAAMC,QAAQ,GAAG,CACf;MAAEC,GAAG,EAAE,QAAQ;MAAEC,QAAQ,EAAE;IAAC,CAAE,EAC9B;MAAED,GAAG,EAAE,SAAS;MAAEC,QAAQ,EAAE;IAAC,CAAE,EAC/B;MAAED,GAAG,EAAE,QAAQ;MAAEC,QAAQ,EAAE;IAAC,CAAE,EAC9B;MAAED,GAAG,EAAE,SAAS;MAAEC,QAAQ,EAAE;IAAC,CAAE,EAC/B;MAAED,GAAG,EAAE,SAAS;MAAEC,QAAQ,EAAE;IAAC,CAAE,CAChC;IAED;IACA,MAAMC,SAAS,GAAG,EAAE;IAEpB;IACAH,QAAQ,CAACF,OAAO,CAAC,UAASM,OAAO;MAC/B;MACA,IAAID,SAAS,CAACC,OAAO,CAACH,GAAG,CAAC,EAAE;QAC1BE,SAAS,CAACC,OAAO,CAACH,GAAG,CAAC,IAAIG,OAAO,CAACF,QAAQ;;MAE5C;MAAA,KACK;QACHC,SAAS,CAACC,OAAO,CAACH,GAAG,CAAC,GAAGG,OAAO,CAACF,QAAQ;;IAE7C,CAAC,CAAC;IAEF;IACA,KAAK,IAAIE,OAAO,IAAID,SAAS,EAAE;MAC7BE,OAAO,CAACC,GAAG,CAAC,GAAGF,OAAO,MAAMD,SAAS,CAACC,OAAO,CAAC,EAAE,CAAC;;EAGrD;;AAlEWvB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;EAAA2B,YAFV;AAAM","names":["of","throwError","CartService","constructor","addToCart","food","cardFoodsList","push","getCartFoods","foodCompactList","length","Error","deleteFoodById","id","filter","f","compactSelectedFoodList","foods","count","forEach","map","produits","nom","quantite","comptages","produit","console","log","factory","providedIn"],"sourceRoot":"","sources":["D:\\ESIG GLOBAL SUCCESS - PARCOURS\\ESIG LICENCE 2 - Génie Logiciel\\ESIG Licence 2 - SEMESTRE 4\\Licence 2 - Complement Web\\TRAVAIL DE M. AGBO - COMPLEMENT DEVELOPPEMENT\\FreshFoodsOnline\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ISFood } from '../shared/model/ISFood';\nimport { Observable, of, throwError } from 'rxjs';\nimport { Foods } from '../shared/model/food';\nimport { Command } from '../shared/model/command';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  private cardFoodsList: Foods[] = [];\n  private foodCompactList: ISFood[] = [];\n\n  constructor() {\n    \n  }\n\n  public addToCart(food: Foods): void {\n    this.cardFoodsList.push(food);\n  }\n\n  public getCartFoods(): Observable<ISFood[]>{\n    if (this.foodCompactList.length > 0) {\n      return of(this.foodCompactList);\n    }else {\n      return throwError(() => new Error(\"Food untifined in the cart list.\"));\n    }\n  }\n\n  public deleteFoodById(id: number): Observable<boolean>{\n    this.cardFoodsList = this.cardFoodsList.filter(f => f.id == id);\n    return of(true);\n  }\n\n  public compactSelectedFoodList(foods: Foods[]){\n\n    let count!: Command[];\n\n    foods.forEach((f) => {\n      if (count[f.id]) {\n        count.map\n      }\n    })\n\n\n    // Exemple de liste d'objets\n    const produits = [\n      { nom: \"Pommes\", quantite: 5 },\n      { nom: \"Oranges\", quantite: 2 },\n      { nom: \"Pommes\", quantite: 3 },\n      { nom: \"Bananes\", quantite: 1 },\n      { nom: \"Oranges\", quantite: 4 }\n    ];\n\n    // Initialisation de l'objet des comptages\n    const comptages = {};\n\n    // Boucle sur chaque objet dans la liste\n    produits.forEach(function(produit) {\n      // Si le nom du produit existe déjà dans l'objet des comptages, on ajoute la quantité à la valeur existante\n      if (comptages[produit.nom]) {\n        comptages[produit.nom] += produit.quantite;\n      }\n      // Sinon, on crée une nouvelle entrée pour ce produit\n      else {\n        comptages[produit.nom] = produit.quantite;\n      }\n    });\n\n    // Affichage des comptages\n    for (let produit in comptages) {\n      console.log(`${produit} : ${comptages[produit]}`);\n    }\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}