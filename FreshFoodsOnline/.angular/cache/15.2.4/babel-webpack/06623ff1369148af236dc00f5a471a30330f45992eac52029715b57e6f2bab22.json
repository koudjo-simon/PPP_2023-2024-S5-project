{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cardFoodsList = [];\n    this.cardCommandLinesList = [];\n  }\n  addToCart(food) {\n    this.cardFoodsList.push(food);\n    this.cardCommandLinesList.forEach(f => {\n      const existingCommandLine = this.cardCommandLinesList.findIndex(commandLine => commandLine.food.foodId == food.foodId);\n      if (existingCommandLine) {\n        this.cardCommandLinesList[existingCommandLine].quantity++;\n        this.cardCommandLinesList[existingCommandLine].totalCommandLinePrice += food.price;\n      } else {\n        let commandLine = {\n          commandLineId: \"\",\n          food: food,\n          commandId: \"\",\n          unitPrice: food.price,\n          quantity: 1,\n          totalCommandLinePrice: food.price\n        };\n        this.cardCommandLinesList.push(commandLine);\n      }\n    });\n  }\n  addCommandLinesToTheCart(cmdLines) {\n    cmdLines.forEach(cmdLine => {\n      this.cardCommandLinesList.push(cmdLine);\n    });\n    return of(true);\n  }\n  getCartCmdLinesFoods() {\n    if (this.cardFoodsList.length > 0) {\n      return of(this.cardCommandLinesList);\n    } else {\n      return throwError(() => new Error(\"Food untifined in the cart list.\"));\n    }\n  }\n  getTotalPrice() {\n    let price = 0;\n    this.cardFoodsList.forEach(element => {\n      price += element.price;\n    });\n    return of(price);\n  }\n  deleteComandeLine(commandLineId) {\n    this.cardCommandLinesList = this.cardCommandLinesList.filter(c => c.commandLineId == commandLineId);\n    return of(true);\n  }\n  deleteFoodById(id) {\n    this.cardFoodsList = this.cardFoodsList.filter(f => f.foodId == id);\n    return of(true);\n  }\n  cardContainAddFoods() {\n    return this.cardFoodsList.length > 0;\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAoBA,EAAE,EAAEC,UAAU,QAAO,MAAM;;AAO/C,OAAM,MAAOC,WAAW;EAKtBC;IAHQ,kBAAa,GAAW,EAAE;IAC1B,yBAAoB,GAAkB,EAAE;EAIhD;EAEOC,SAAS,CAACC,IAAU;IACzB,IAAI,CAACC,aAAa,CAACC,IAAI,CAACF,IAAI,CAAC;IAC7B,IAAI,CAACG,oBAAoB,CAACC,OAAO,CAACC,CAAC,IAAG;MACpC,MAAMC,mBAAmB,GAAG,IAAI,CAACH,oBAAoB,CAClDI,SAAS,CAACC,WAAW,IAAIA,WAAW,CAACR,IAAI,CAACS,MAAM,IAAIT,IAAI,CAACS,MAAM,CAAC;MACnE,IAAIH,mBAAmB,EAAE;QACvB,IAAI,CAACH,oBAAoB,CAACG,mBAAmB,CAAC,CAACI,QAAQ,EAAE;QACzD,IAAI,CAACP,oBAAoB,CAACG,mBAAmB,CAAC,CAACK,qBAAqB,IAAIX,IAAI,CAACY,KAAK;OACnF,MAAM;QACL,IAAIJ,WAAW,GAAgB;UAC7BK,aAAa,EAAE,EAAE;UACjBb,IAAI,EAAEA,IAAI;UACVc,SAAS,EAAE,EAAE;UACbC,SAAS,EAAEf,IAAI,CAACY,KAAK;UACrBF,QAAQ,EAAE,CAAC;UACXC,qBAAqB,EAAEX,IAAI,CAACY;SAC7B;QACD,IAAI,CAACT,oBAAoB,CAACD,IAAI,CAACM,WAAW,CAAC;;IAE/C,CAAC,CAAC;EACJ;EAEOQ,wBAAwB,CAACC,QAA4B;IAC1DA,QAAQ,CAACb,OAAO,CAACc,OAAO,IAAG;MACzB,IAAI,CAACf,oBAAoB,CAACD,IAAI,CAACgB,OAAO,CAAC;IACzC,CAAC,CAAC;IACF,OAAOvB,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOwB,oBAAoB;IACzB,IAAI,IAAI,CAAClB,aAAa,CAACmB,MAAM,GAAG,CAAC,EAAE;MACjC,OAAOzB,EAAE,CAAC,IAAI,CAACQ,oBAAoB,CAAC;KACrC,MAAM;MACL,OAAOP,UAAU,CAAC,MAAM,IAAIyB,KAAK,CAAC,kCAAkC,CAAC,CAAC;;EAE1E;EAEOC,aAAa;IAClB,IAAIV,KAAK,GAAW,CAAC;IACrB,IAAI,CAACX,aAAa,CAACG,OAAO,CAACmB,OAAO,IAAG;MACnCX,KAAK,IAAIW,OAAO,CAACX,KAAK;IACxB,CAAC,CAAC;IACF,OAAOjB,EAAE,CAACiB,KAAK,CAAC;EAClB;EAEOY,iBAAiB,CAACX,aAAqB;IAC5C,IAAI,CAACV,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,CAACsB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACb,aAAa,IAAIA,aAAa,CAAC;IACnG,OAAOlB,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOgC,cAAc,CAACC,EAAU;IAC9B,IAAI,CAAC3B,aAAa,GAAG,IAAI,CAACA,aAAa,CAACwB,MAAM,CAACpB,CAAC,IAAIA,CAAC,CAACI,MAAM,IAAImB,EAAE,CAAC;IACnE,OAAOjC,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOkC,mBAAmB;IACxB,OAAO,IAAI,CAAC5B,aAAa,CAACmB,MAAM,GAAG,CAAC;EACtC;;AAlEWvB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAiC,SAAXjC,WAAW;EAAAkC,YAFV;AAAM","names":["of","throwError","CartService","constructor","addToCart","food","cardFoodsList","push","cardCommandLinesList","forEach","f","existingCommandLine","findIndex","commandLine","foodId","quantity","totalCommandLinePrice","price","commandLineId","commandId","unitPrice","addCommandLinesToTheCart","cmdLines","cmdLine","getCartCmdLinesFoods","length","Error","getTotalPrice","element","deleteComandeLine","filter","c","deleteFoodById","id","cardContainAddFoods","factory","providedIn"],"sourceRoot":"","sources":["D:\\ESIG GLOBAL SUCCESS - PARCOURS\\ESIG LICENCE 2 - Génie Logiciel\\ESIG Licence 2 - SEMESTRE 4\\Licence 2 - Complement Web\\TRAVAIL DE M. AGBO - COMPLEMENT DEVELOPPEMENT\\MyWork\\FreshFoodsOnline\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable, of, throwError} from 'rxjs';\nimport {Food} from '../shared/model/food';\nimport {CommandLine} from \"../shared/model/command-line\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  private cardFoodsList: Food[] = [];\n  private cardCommandLinesList: CommandLine[] = [];\n\n  constructor() {\n\n  }\n\n  public addToCart(food: Food): void {\n    this.cardFoodsList.push(food);\n    this.cardCommandLinesList.forEach(f => {\n      const existingCommandLine = this.cardCommandLinesList\n        .findIndex(commandLine => commandLine.food.foodId == food.foodId);\n      if (existingCommandLine) {\n        this.cardCommandLinesList[existingCommandLine].quantity++;\n        this.cardCommandLinesList[existingCommandLine].totalCommandLinePrice += food.price;\n      } else {\n        let commandLine: CommandLine = {\n          commandLineId: \"\",\n          food: food,\n          commandId: \"\",\n          unitPrice: food.price,\n          quantity: 1,\n          totalCommandLinePrice: food.price\n        };\n        this.cardCommandLinesList.push(commandLine);\n      }\n    });\n  }\n\n  public addCommandLinesToTheCart(cmdLines: Array<CommandLine>): Observable<boolean> {\n    cmdLines.forEach(cmdLine => {\n      this.cardCommandLinesList.push(cmdLine)\n    });\n    return of(true);\n  }\n\n  public getCartCmdLinesFoods(): Observable<CommandLine[]> {\n    if (this.cardFoodsList.length > 0) {\n      return of(this.cardCommandLinesList);\n    } else {\n      return throwError(() => new Error(\"Food untifined in the cart list.\"));\n    }\n  }\n\n  public getTotalPrice(): Observable<number> {\n    let price: number = 0;\n    this.cardFoodsList.forEach(element => {\n      price += element.price;\n    });\n    return of(price);\n  }\n\n  public deleteComandeLine(commandLineId: string): Observable<boolean> {\n    this.cardCommandLinesList = this.cardCommandLinesList.filter(c => c.commandLineId == commandLineId);\n    return of(true);\n  }\n\n  public deleteFoodById(id: string): Observable<boolean> {\n    this.cardFoodsList = this.cardFoodsList.filter(f => f.foodId == id);\n    return of(true);\n  }\n\n  public cardContainAddFoods() {\n    return this.cardFoodsList.length > 0;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}