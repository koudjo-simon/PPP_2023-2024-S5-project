{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AuthenticationService {\n  constructor() {\n    this.users = [];\n    this.users.push({\n      id: 1,\n      username: \"user1\",\n      email: \"oks@gmail.com\",\n      password: \"1234\",\n      roles: [\"USER\"]\n    });\n    this.users.push({\n      id: 2,\n      username: \"user2\",\n      email: \"robinson@gmail.com\",\n      password: \"1234\",\n      roles: [\"USER\"]\n    });\n    this.users.push({\n      id: 3,\n      username: \"admin\",\n      email: \"petro@gmail.com\",\n      password: \"1234\",\n      roles: [\"ADMIN\", \"USER\"]\n    });\n  }\n  login(username, password) {\n    let admin = this.users.find(u => u.username == username);\n    if (!admin) return throwError(() => new Error(\"User not found\"));\n    if (admin.password != password) return throwError(() => new Error(\"Bad credentials\"));\n    return of(admin);\n  }\n  authenticateUser(admin) {\n    this.authenticatedUser = admin;\n    localStorage.setItem(\"authUser\", JSON.stringify({\n      username: admin.username,\n      roles: admin.roles,\n      jwt: \"JWT_TOKEN\"\n    }));\n    return of(true);\n  }\n  hasRole(role) {\n    return this.authenticatedUser.roles.includes(role);\n  }\n  isAuthenticated() {\n    return this.authenticatedUser != undefined;\n  }\n  getAuthenticatedUser() {\n    if (this.authenticatedUser == undefined) return throwError(() => new Error(\"Undefined authenticated user.\"));\n    return of(this.authenticatedUser);\n  }\n  logout() {\n    this.authenticatedUser = undefined;\n    localStorage.removeItem(\"authUser\");\n    return of(true);\n  }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)();\n};\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,EAAEC,UAAU,QAAQ,MAAM;;AAKjD,OAAM,MAAOC,qBAAqB;EAKhCC;IAHA,UAAK,GAAa,EAAE;IAIlB,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC;MAACC,EAAE,EAAG,CAAC;MAAEC,QAAQ,EAAC,OAAO;MAAEC,KAAK,EAAC,eAAe;MAAEC,QAAQ,EAAC,MAAM;MAAEC,KAAK,EAAC,CAAC,MAAM;IAAC,CAAC,CAAC;IACnG,IAAI,CAACN,KAAK,CAACC,IAAI,CAAC;MAACC,EAAE,EAAG,CAAC;MAAEC,QAAQ,EAAC,OAAO;MAAEC,KAAK,EAAC,oBAAoB;MAAEC,QAAQ,EAAC,MAAM;MAAEC,KAAK,EAAC,CAAC,MAAM;IAAC,CAAC,CAAC;IACxG,IAAI,CAACN,KAAK,CAACC,IAAI,CAAC;MAACC,EAAE,EAAG,CAAC;MAAEC,QAAQ,EAAC,OAAO;MAAEC,KAAK,EAAC,iBAAiB;MAAEC,QAAQ,EAAC,MAAM;MAAEC,KAAK,EAAC,CAAC,OAAO,EAAE,MAAM;IAAC,CAAC,CAAC;EAChH;EAEOC,KAAK,CAACJ,QAAgB,EAAEE,QAAgB;IAC7C,IAAIG,KAAK,GAAG,IAAI,CAACR,KAAK,CAACS,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACP,QAAQ,IAAIA,QAAQ,CAAC;IACxD,IAAI,CAACK,KAAK,EAAE,OAAOX,UAAU,CAAC,MAAM,IAAIc,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAChE,IAAIH,KAAK,CAACH,QAAQ,IAAIA,QAAQ,EAAE,OAAOR,UAAU,CAAC,MAAM,IAAIc,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrF,OAAOf,EAAE,CAACY,KAAK,CAAC;EAClB;EAEOI,gBAAgB,CAACJ,KAAY;IAClC,IAAI,CAACK,iBAAiB,GAAGL,KAAK;IAC9BM,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAAC;MAACd,QAAQ,EAACK,KAAK,CAACL,QAAQ;MAAEG,KAAK,EAACE,KAAK,CAACF,KAAK;MAAEY,GAAG,EAAC;IAAW,CAAC,CAAC,CAAC;IAC/G,OAAOtB,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOuB,OAAO,CAACC,IAAW;IACxB,OAAO,IAAI,CAACP,iBAAkB,CAACP,KAAK,CAACe,QAAQ,CAACD,IAAI,CAAC;EACrD;EAEOE,eAAe;IACpB,OAAO,IAAI,CAACT,iBAAiB,IAAIU,SAAS;EAC5C;EAEOC,oBAAoB;IACzB,IAAI,IAAI,CAACX,iBAAiB,IAAIU,SAAS,EAAE,OAAO1B,UAAU,CAAC,MAAM,IAAIc,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAC5G,OAAOf,EAAE,CAAC,IAAI,CAACiB,iBAAiB,CAAC;EACnC;EAEOY,MAAM;IACX,IAAI,CAACZ,iBAAiB,GAAGU,SAAS;IAClCT,YAAY,CAACY,UAAU,CAAC,UAAU,CAAC;IACnC,OAAO9B,EAAE,CAAC,IAAI,CAAC;EACjB;;AAzCWE,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;SAArBA,qBAAqB;EAAA6B,SAArB7B,qBAAqB;EAAA8B,YAFpB;AAAM","names":["of","throwError","AuthenticationService","constructor","users","push","id","username","email","password","roles","login","admin","find","u","Error","authenticateUser","authenticatedUser","localStorage","setItem","JSON","stringify","jwt","hasRole","role","includes","isAuthenticated","undefined","getAuthenticatedUser","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["D:\\PROJETS\\PPP - 2023_2024\\FreshFoodsOnline\\src\\app\\module-admin\\admin-services\\authentication\\authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Admin } from '../../admin-model/admin';\r\nimport { Observable, of, throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  users : Admin[] = [];\r\n  authenticatedUser : Admin | undefined;\r\n\r\n  constructor() {\r\n    this.users.push({id : 1, username:\"user1\", email:\"oks@gmail.com\", password:\"1234\", roles:[\"USER\"]});\r\n    this.users.push({id : 2, username:\"user2\", email:\"robinson@gmail.com\", password:\"1234\", roles:[\"USER\"]});\r\n    this.users.push({id : 3, username:\"admin\", email:\"petro@gmail.com\", password:\"1234\", roles:[\"ADMIN\", \"USER\"]});\r\n  }\r\n\r\n  public login(username: string, password: string): Observable<Admin>{\r\n    let admin = this.users.find(u => u.username == username);\r\n    if (!admin) return throwError(() => new Error(\"User not found\"));\r\n    if (admin.password != password) return throwError(() => new Error(\"Bad credentials\"));\r\n    return of(admin);\r\n  }\r\n\r\n  public authenticateUser(admin: Admin): Observable<boolean>{\r\n    this.authenticatedUser = admin;\r\n    localStorage.setItem(\"authUser\", JSON.stringify({username:admin.username, roles:admin.roles, jwt:\"JWT_TOKEN\"}));\r\n    return of(true);\r\n  }\r\n\r\n  public hasRole(role:string): boolean{\r\n    return this.authenticatedUser!.roles.includes(role);\r\n  }\r\n\r\n  public isAuthenticated(){\r\n    return this.authenticatedUser != undefined;\r\n  }\r\n\r\n  public getAuthenticatedUser(): Observable<Admin>{\r\n    if (this.authenticatedUser == undefined) return throwError(() => new Error(\"Undefined authenticated user.\"));\r\n    return of(this.authenticatedUser);\r\n  }\r\n\r\n  public logout(): Observable<boolean>{\r\n    this.authenticatedUser = undefined;\r\n    localStorage.removeItem(\"authUser\");\r\n    return of(true);\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}