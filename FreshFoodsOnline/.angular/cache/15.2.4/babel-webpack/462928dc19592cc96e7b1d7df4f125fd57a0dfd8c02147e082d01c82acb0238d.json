{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cardFoodsList = [];\n    this.cardCommandLinesList = [];\n  }\n  addToCart(food) {\n    this.cardFoodsList.push(food);\n    this.cardFoodsList.forEach(f => {\n      this.cardCommandLinesList.forEach(c => {\n        const existingCommandLine = this.cardCommandLinesList.findIndex(commandLine => commandLine.food.foodId == food.foodId);\n        if (existingCommandLine) {\n          this.cardCommandLinesList[existingCommandLine].quantity++;\n          this.cardCommandLinesList[existingCommandLine].totalCommandLinePrice += food.price;\n        } else {\n          let commandLine = {\n            commandLineId: \"\",\n            food: f,\n            commandId: \"\",\n            unitPrice: f.price,\n            quantity: 1,\n            totalCommandLinePrice: f.price\n          };\n          this.cardCommandLinesList.push(commandLine);\n        }\n      });\n    });\n  }\n  addCommandLinesToTheCart(cmdLines) {\n    cmdLines.forEach(cmdLine => {\n      this.cardCommandLinesList.push(cmdLine);\n    });\n    return of(true);\n  }\n  getCartCmdLinesFoods() {\n    if (this.cardFoodsList.length > 0) {\n      return of(this.cardCommandLinesList);\n    } else {\n      return throwError(() => new Error(\"Food untifined in the cart list.\"));\n    }\n  }\n  getTotalPrice() {\n    let price = 0;\n    this.cardFoodsList.forEach(element => {\n      price += element.price;\n    });\n    return of(price);\n  }\n  deleteComandeLine(commandLineId) {\n    this.cardCommandLinesList = this.cardCommandLinesList.filter(c => c.commandLineId == commandLineId);\n    return of(true);\n  }\n  deleteFoodById(id) {\n    this.cardFoodsList = this.cardFoodsList.filter(f => f.foodId == id);\n    return of(true);\n  }\n  cardContainAddFoods() {\n    return this.cardFoodsList.length > 0;\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAoBA,EAAE,EAAEC,UAAU,QAAO,MAAM;;AAO/C,OAAM,MAAOC,WAAW;EAKtBC;IAHQ,kBAAa,GAAW,EAAE;IAC1B,yBAAoB,GAAkB,EAAE;EAEhC;EAETC,SAAS,CAACC,IAAU;IACzB,IAAI,CAACC,aAAa,CAACC,IAAI,CAACF,IAAI,CAAC;IAC7B,IAAI,CAACC,aAAa,CAACE,OAAO,CAACC,CAAC,IAAG;MAC7B,IAAI,CAACC,oBAAoB,CAACF,OAAO,CAACG,CAAC,IAAG;QACpC,MAAMC,mBAAmB,GAAG,IAAI,CAACF,oBAAoB,CAClDG,SAAS,CAACC,WAAW,IAAIA,WAAW,CAACT,IAAI,CAACU,MAAM,IAAIV,IAAI,CAACU,MAAM,CAAC;QACnE,IAAIH,mBAAmB,EAAE;UACvB,IAAI,CAACF,oBAAoB,CAACE,mBAAmB,CAAC,CAACI,QAAQ,EAAE;UACzD,IAAI,CAACN,oBAAoB,CAACE,mBAAmB,CAAC,CAACK,qBAAqB,IAAIZ,IAAI,CAACa,KAAK;SACnF,MAAM;UACL,IAAIJ,WAAW,GAAgB;YAC7BK,aAAa,EAAE,EAAE;YACjBd,IAAI,EAAEI,CAAC;YACPW,SAAS,EAAE,EAAE;YACbC,SAAS,EAAEZ,CAAC,CAACS,KAAK;YAClBF,QAAQ,EAAE,CAAC;YACXC,qBAAqB,EAAER,CAAC,CAACS;WAC1B;UACD,IAAI,CAACR,oBAAoB,CAACH,IAAI,CAACO,WAAW,CAAC;;MAE/C,CAAC,CAAC;IACF,CAAC,CAAC;EACN;EAEOQ,wBAAwB,CAACC,QAA4B;IAC1DA,QAAQ,CAACf,OAAO,CAACgB,OAAO,IAAG;MACzB,IAAI,CAACd,oBAAoB,CAACH,IAAI,CAACiB,OAAO,CAAC;IACzC,CAAC,CAAC;IACF,OAAOxB,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOyB,oBAAoB;IACzB,IAAI,IAAI,CAACnB,aAAa,CAACoB,MAAM,GAAG,CAAC,EAAE;MACjC,OAAO1B,EAAE,CAAC,IAAI,CAACU,oBAAoB,CAAC;KACrC,MAAM;MACL,OAAOT,UAAU,CAAC,MAAM,IAAI0B,KAAK,CAAC,kCAAkC,CAAC,CAAC;;EAE1E;EAEOC,aAAa;IAClB,IAAIV,KAAK,GAAW,CAAC;IACrB,IAAI,CAACZ,aAAa,CAACE,OAAO,CAACqB,OAAO,IAAG;MACnCX,KAAK,IAAIW,OAAO,CAACX,KAAK;IACxB,CAAC,CAAC;IACF,OAAOlB,EAAE,CAACkB,KAAK,CAAC;EAClB;EAEOY,iBAAiB,CAACX,aAAqB;IAC5C,IAAI,CAACT,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,CAACqB,MAAM,CAACpB,CAAC,IAAIA,CAAC,CAACQ,aAAa,IAAIA,aAAa,CAAC;IACnG,OAAOnB,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOgC,cAAc,CAACC,EAAU;IAC9B,IAAI,CAAC3B,aAAa,GAAG,IAAI,CAACA,aAAa,CAACyB,MAAM,CAACtB,CAAC,IAAIA,CAAC,CAACM,MAAM,IAAIkB,EAAE,CAAC;IACnE,OAAOjC,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOkC,mBAAmB;IACxB,OAAO,IAAI,CAAC5B,aAAa,CAACoB,MAAM,GAAG,CAAC;EACtC;;AAlEWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAiC,SAAXjC,WAAW;EAAAkC,YAFV;AAAM","names":["of","throwError","CartService","constructor","addToCart","food","cardFoodsList","push","forEach","f","cardCommandLinesList","c","existingCommandLine","findIndex","commandLine","foodId","quantity","totalCommandLinePrice","price","commandLineId","commandId","unitPrice","addCommandLinesToTheCart","cmdLines","cmdLine","getCartCmdLinesFoods","length","Error","getTotalPrice","element","deleteComandeLine","filter","deleteFoodById","id","cardContainAddFoods","factory","providedIn"],"sourceRoot":"","sources":["D:\\ESIG GLOBAL SUCCESS - PARCOURS\\ESIG LICENCE 2 - Génie Logiciel\\ESIG Licence 2 - SEMESTRE 4\\Licence 2 - Complement Web\\TRAVAIL DE M. AGBO - COMPLEMENT DEVELOPPEMENT\\MyWork\\FreshFoodsOnline\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable, of, throwError} from 'rxjs';\nimport {Food} from '../shared/model/food';\nimport {CommandLine} from \"../shared/model/command-line\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  private cardFoodsList: Food[] = [];\n  private cardCommandLinesList: CommandLine[] = [];\n\n  constructor() { }\n\n  public addToCart(food: Food): void {\n    this.cardFoodsList.push(food);\n    this.cardFoodsList.forEach(f => {\n      this.cardCommandLinesList.forEach(c => {\n        const existingCommandLine = this.cardCommandLinesList\n          .findIndex(commandLine => commandLine.food.foodId == food.foodId);\n        if (existingCommandLine) {\n          this.cardCommandLinesList[existingCommandLine].quantity++;\n          this.cardCommandLinesList[existingCommandLine].totalCommandLinePrice += food.price;\n        } else {\n          let commandLine: CommandLine = {\n            commandLineId: \"\",\n            food: f,\n            commandId: \"\",\n            unitPrice: f.price,\n            quantity: 1,\n            totalCommandLinePrice: f.price\n          };\n          this.cardCommandLinesList.push(commandLine);\n        }\n      });\n      })\n  }\n\n  public addCommandLinesToTheCart(cmdLines: Array<CommandLine>): Observable<boolean> {\n    cmdLines.forEach(cmdLine => {\n      this.cardCommandLinesList.push(cmdLine)\n    });\n    return of(true);\n  }\n\n  public getCartCmdLinesFoods(): Observable<CommandLine[]> {\n    if (this.cardFoodsList.length > 0) {\n      return of(this.cardCommandLinesList);\n    } else {\n      return throwError(() => new Error(\"Food untifined in the cart list.\"));\n    }\n  }\n\n  public getTotalPrice(): Observable<number> {\n    let price: number = 0;\n    this.cardFoodsList.forEach(element => {\n      price += element.price;\n    });\n    return of(price);\n  }\n\n  public deleteComandeLine(commandLineId: string): Observable<boolean> {\n    this.cardCommandLinesList = this.cardCommandLinesList.filter(c => c.commandLineId == commandLineId);\n    return of(true);\n  }\n\n  public deleteFoodById(id: string): Observable<boolean> {\n    this.cardFoodsList = this.cardFoodsList.filter(f => f.foodId == id);\n    return of(true);\n  }\n\n  public cardContainAddFoods() {\n    return this.cardFoodsList.length > 0;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}